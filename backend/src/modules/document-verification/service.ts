// src/modules/document-verification/service.ts
import { Logger } from "@medusajs/framework/types";
import OpenAI from "openai";
import puppeteer from "puppeteer";
import fs from "fs";
import path from "path";
import {
  DocumentType,
  VerificationResult,
  BothSidesVerificationResult,
} from "./types";
import { validationHelpers } from "../../admin/routes/financing/utils/validationHelpers";

type InjectedDependencies = {
  logger: Logger;
};

export class DocumentVerificationModuleService {
  protected logger_: Logger;
  private openai: OpenAI;
  private sharedAssistant: any = null; // Assistant reutilizable
  private assistantInitialized = false;

  constructor({ logger }: InjectedDependencies) {
    this.logger_ = logger;

    if (!process.env.OPENAI_API_KEY) {
      this.logger_.warn("‚ö†Ô∏è OPENAI_API_KEY no est√° configurada");
    }

    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

  // ‚úÖ CREAR O REUTILIZAR ASSISTANT COMPARTIDO
  private async getOrCreateSharedAssistant() {
    if (this.sharedAssistant && this.assistantInitialized) {
      this.logger_.info("‚ôªÔ∏è Reutilizando assistant existente");
      return this.sharedAssistant;
    }

    try {
      this.logger_.info(
        "üÜï Creando assistant compartido para an√°lisis de documentos..."
      );

      this.sharedAssistant = await this.openai.beta.assistants.create({
        name: "Document Analyzer Shared",
        instructions: `Eres un experto analizador de documentos espa√±oles especializado en:
        - DNI y NIE (anverso y reverso)
        - N√≥minas espa√±olas (PDF e im√°genes)
        - Documentos bancarios (certificados y extractos)
        - Justificantes de pensi√≥n y paro
        
        SIEMPRE responde con JSON v√°lido seg√∫n el formato solicitado.
        Nunca agregues texto antes o despu√©s del JSON.
        Eres preciso, confiable y detectas falsificaciones.`,
        model: "gpt-4o",
        tools: [{ type: "file_search" }],
      });

      this.assistantInitialized = true;
      this.logger_.info(
        `‚úÖ Assistant compartido creado: ${this.sharedAssistant.id}`
      );

      return this.sharedAssistant;
    } catch (error: any) {
      this.logger_.error(
        `‚ùå Error creando assistant compartido: ${error.message}`
      );
      throw error;
    }
  }

  async verifyIdentityDocument(
    imageBase64: string,
    documentSide: "front" | "back"
  ): Promise<VerificationResult> {
    try {
      this.logger_.info(`üîç Verificando ${documentSide} del DNI/NIE...`);

      const frontPrompt = `Analiza esta imagen del ANVERSO de un DNI o NIE espa√±ol y extrae la siguiente informaci√≥n:

VALIDACIONES IMPORTANTES:
1. ¬øEs un DNI o NIE espa√±ol v√°lido y legible?
2. ¬øEst√° la foto de la persona presente y visible?
3. ¬øLos textos est√°n claramente legibles sin borrosidad?
4. ¬øLos colores y formato coinciden con un DNI o NIE espa√±ol real?
5. ¬øHay signos de falsificaci√≥n, manipulaci√≥n o edici√≥n digital?

INFORMACI√ìN A EXTRAER:
- Nombre completo de la persona
- N√∫mero de documento (formato DNI: 12345678X o formato NIE: X1234567L/Y1234567L/Z1234567L)
- Fecha de nacimiento
- Sexo (H/M)
- Nacionalidad`;

      // ‚úÖ NUEVO PROMPT ESPEC√çFICO PARA REVERSO
      const backPrompt = `Analiza esta imagen del REVERSO de un DNI o NIE espa√±ol y busca ESPEC√çFICAMENTE estos elementos:

üéØ DATOS CLAVE A EXTRAER DEL REVERSO DNI/NIE ESPA√ëOL:

1. **N√öMERO DE EQUIPO**: Busca texto como "EQUIPO" seguido de n√∫meros/letras (ej: "30331L601", "12345A123")
2. **DOMICILIO/DIRECCI√ìN**: Busca direcciones de oficinas o domicilios mencionados
3. **LUGAR DE NACIMIENTO**: Puede aparecer como ubicaci√≥n o referencia geogr√°fica
4. **TEXTO OFICIAL**: Busca frases como "DOCUMENTO NACIONAL DE IDENTIDAD", "N√öMERO DE IDENTIDAD DE EXTRANJERO", "DIRECCI√ìN GENERAL", etc.

üîç ELEMENTOS VISUALES A VERIFICAR:
- Gradientes de colores (naranjas, amarillos, azules t√≠picos del DNI/NIE)
- C√≥digos de barras o elementos gr√°ficos
- Dise√±o oficial con texto en espa√±ol
- Formato de tarjeta oficial

‚ö†Ô∏è IMPORTANTE: 
- El reverso NO tiene foto de persona
- El reverso NO tiene fechas de expedici√≥n/caducidad  
- El reverso S√ç tiene informaci√≥n de oficinas y c√≥digos
- NIE y DNI tienen el mismo formato de reverso

CRITERIOS DE VALIDACI√ìN:
‚úÖ V√ÅLIDO si encuentra:
- N√∫mero de EQUIPO claro
- O direcciones oficiales en espa√±ol
- O dise√±o oficial reconocible del DNI/NIE
- O texto oficial del Ministerio del Interior

‚ùå INV√ÅLIDO solo si:
- Es claramente otra cosa (pasaporte, carnet, foto personal, etc.)
- No tiene ning√∫n elemento t√≠pico del reverso DNI/NIE`;

      const prompt = documentSide === "front" ? frontPrompt : backPrompt;

      // ‚úÖ FORMATO JSON ESPEC√çFICO PARA EL REVERSO
      const frontJsonFormat = `{
  "isValid": false,
  "extractedData": {
    "fullName": null,
    "documentNumber": null,
    "birthDate": null,
    "nationality": null
    "sex": null,
  },
  "confidence": 0,
  "issues": ["La imagen no es un DNI v√°lido o no se puede procesar"],
  "imageQuality": "poor"
}`;

      const backJsonFormat = `{
  "isValid": true,
  "extractedData": {
    "documentSide": "back",
    "equipmentNumber": "30331L601",
    "hasOfficialText": true,
    "hasOfficialDesign": true,
    "addresses": ["direcciones encontradas"],
    "birthPlace": "lugar si se encuentra"
  },
  "confidence": 85,
  "issues": [],
  "imageQuality": "good"
}`;

      const jsonFormat =
        documentSide === "front" ? frontJsonFormat : backJsonFormat;

      // ‚úÖ SISTEMA DE MENSAJES ESPEC√çFICO
      const systemMessage =
        documentSide === "front"
          ? `Eres un experto en verificaci√≥n del ANVERSO de documentos DNI y NIE espa√±oles. 
         Conoces perfectamente los formatos de ambos documentos y sus diferencias.
         SIEMPRE responde con JSON v√°lido, sin excepci√≥n.`
          : `Eres un experto en verificaci√≥n del REVERSO de documentos DNI y NIE espa√±oles.
         
         MISI√ìN: Buscar el N√öMERO DE EQUIPO, direcciones, y elementos oficiales.
         
         El reverso del DNI y NIE espa√±ol SIEMPRE tiene:
         - N√∫mero de EQUIPO (c√≥digo alfanum√©rico)
         - Informaci√≥n de oficinas/direcciones
         - Dise√±o oficial con gradientes
         - Texto del Ministerio del Interior
         - Ambos documentos tienen el mismo formato de reverso
         
         SIEMPRE responde con JSON v√°lido, sin excepci√≥n.`;

      const response = await this.openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: systemMessage,
          },
          {
            role: "user",
            content: [
              {
                type: "text",
                text: `${prompt}

FORMATO DE RESPUESTA OBLIGATORIO - USA ESTA ESTRUCTURA:

${jsonFormat}

${
  documentSide === "back"
    ? `
üéØ INSTRUCCIONES ESPEC√çFICAS PARA REVERSO:
- Busca CUALQUIER n√∫mero despu√©s de "EQUIPO" 
- Si encuentras el n√∫mero de equipo = V√ÅLIDO autom√°ticamente
- Si ves direcciones oficiales = V√ÅLIDO  
- Si ves dise√±o oficial DNI/NIE = V√ÅLIDO
- confidence entre 80-95 si encuentras datos clave
- confidence 60-75 si solo ves dise√±o oficial
- SOLO marca como inv√°lido si es obviamente otra cosa

EJEMPLO de lo que buscas:
- "EQUIPO 30331L601" ‚Üê ESTO ES CLAVE
- Direcciones de oficinas en espa√±ol
- Texto oficial del gobierno
- "DOCUMENTO NACIONAL DE IDENTIDAD" o "N√öMERO DE IDENTIDAD DE EXTRANJERO"
`
    : `
- Si la imagen S√ç es un DNI o NIE v√°lido, cambia isValid a true y completa los datos
- Para DNI: formato 12345678X (8 n√∫meros + 1 letra)
- Para NIE: formato X1234567L, Y1234567L o Z1234567L (letra + 7 n√∫meros + 1 letra)
- confidence debe ser un N√öMERO ENTERO entre 0 y 100
`
}
- NUNCA agregues texto antes o despu√©s del JSON
- NUNCA uses markdown o bloques de c√≥digo`,
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${imageBase64}`,
                  detail: "high",
                },
              },
            ],
          },
        ],
        max_tokens: 1000,
        temperature: 0,
        response_format: { type: "json_object" },
      });

      const content = response.choices[0].message.content?.trim();

      if (!content) {
        throw new Error("No se recibi√≥ respuesta de OpenAI");
      }

      // ‚úÖ LOGGING COMPLETO
      this.logger_.info(
        `üìÑ ========== RESPUESTA COMPLETA DE OPENAI ==========`
      );
      this.logger_.info(content);
      this.logger_.info(`üìÑ ================================================`);

      let result: VerificationResult;
      try {
        let cleanContent = content;

        if (!cleanContent.startsWith("{")) {
          const jsonStart = cleanContent.indexOf("{");
          const jsonEnd = cleanContent.lastIndexOf("}");

          if (jsonStart !== -1 && jsonEnd !== -1) {
            cleanContent = cleanContent.substring(jsonStart, jsonEnd + 1);
          }
        }

        result = JSON.parse(cleanContent);

        if (
          !result.hasOwnProperty("isValid") ||
          !result.hasOwnProperty("confidence")
        ) {
          throw new Error("Estructura JSON inv√°lida");
        }

        // ‚úÖ VALIDACI√ìN ADICIONAL PARA EL REVERSO
        if (documentSide === "back" && result.extractedData) {
          // Si encuentra n√∫mero de equipo, autom√°ticamente v√°lido
          if (result.extractedData.equipmentNumber) {
            result.isValid = true;
            if (result.confidence < 70) {
              result.confidence = 80; // Aumentar confianza si encuentra equipo
            }
            this.logger_.info(
              `üéØ EQUIPO encontrado: ${result.extractedData.equipmentNumber} - FORZANDO V√ÅLIDO`
            );
          }

          // Si tiene dise√±o oficial, probablemente v√°lido
          if (
            result.extractedData.hasOfficialDesign &&
            result.confidence < 60
          ) {
            result.confidence = 70;
            this.logger_.info(
              `üé® Dise√±o oficial detectado - AUMENTANDO CONFIANZA`
            );
          }
        }

        // ‚úÖ VALIDACI√ìN DE EDAD PARA DNI FRONT
        if (
          documentSide === "front" &&
          result.extractedData &&
          result.isValid
        ) {
          this.logger_.info(
            `üìÖ Fecha nacimiento RAW: "${result.extractedData.birthDate}"`
          );

          // Test manual del c√°lculo de edad
          const manualAge = validationHelpers.calculateAge(
            result.extractedData.birthDate
          );
          this.logger_.info(`üßÆ Edad calculada manualmente: ${manualAge}`);

          const ageValidation = validationHelpers.validateAgeFromDNI(
            result.extractedData
          );

          if (!ageValidation.isValid) {
            result.isValid = false;
            result.confidence = 0;
            result.issues = result.issues || [];
            result.issues.push(
              ageValidation.message || "Edad insuficiente para financiaci√≥n"
            );

            this.logger_.info(`üö´ EDAD INSUFICIENTE: ${ageValidation.message}`);
            this.logger_.info(
              `üìÖ Fecha nacimiento extra√≠da: ${result.extractedData.birthDate}`
            );
          } else {
            this.logger_.info(`‚úÖ EDAD VALIDADA: ${ageValidation.message}`);
          }
        }
      } catch (parseError: any) {
        this.logger_.error(
          `‚ùå Error parseando JSON de OpenAI: ${parseError?.message}`
        );
        this.logger_.error(`üìÑ Contenido recibido: ${content}`);

        // ‚úÖ FALLBACK ESPEC√çFICO PARA REVERSO
        if (documentSide === "back") {
          this.logger_.info("üîÑ APLICANDO FALLBACK ESPEC√çFICO PARA REVERSO");
          return {
            isValid: true, // Asumimos v√°lido en caso de error de parsing
            extractedData: {
              //@ts-ignore
              documentSide: "back",
              fallbackUsed: true,
              parsingError: true,
            },
            confidence: 65,
            issues: [
              "Error parseando respuesta - aplicado fallback permisivo para reverso",
            ],
            imageQuality: "fair",
          };
        }

        return {
          isValid: false,
          extractedData: {},
          confidence: 0,
          issues: ["Error al procesar la respuesta del an√°lisis"],
          imageQuality: "poor",
        };
      }

      // ‚úÖ LOGGING DETALLADO
      this.logger_.info(
        `‚úÖ Verificaci√≥n completada: ${
          result.isValid ? "V√ÅLIDO" : "INV√ÅLIDO"
        } (${result.confidence}% confianza)`
      );
      this.logger_.info(`üìä Calidad de imagen: ${result.imageQuality}`);

      // Mostrar datos espec√≠ficos del reverso
      if (documentSide === "back" && result.extractedData) {
        this.logger_.info(`üìã ========== DATOS DEL REVERSO ==========`);
        if (result.extractedData.equipmentNumber)
          this.logger_.info(
            `   üéØ EQUIPO: ${result.extractedData.equipmentNumber}`
          );
        if (result.extractedData.addresses)
          this.logger_.info(
            `   üè† Direcciones: ${JSON.stringify(
              result.extractedData.addresses
            )}`
          );
        if (result.extractedData.birthPlace)
          this.logger_.info(
            `   üåç Lugar nacimiento: ${result.extractedData.birthPlace}`
          );
        if (result.extractedData.hasOfficialDesign)
          this.logger_.info(
            `   üé® Dise√±o oficial: ${result.extractedData.hasOfficialDesign}`
          );
        this.logger_.info(`üìã ====================================`);
      }

      if (result.issues && result.issues.length > 0) {
        this.logger_.info(`üìã ========== RAZONES DE RECHAZO ==========`);
        result.issues.forEach((issue, index) => {
          this.logger_.info(`   ${index + 1}. ${issue}`);
        });
        this.logger_.info(`üìã =========================================`);
      }

      return result;
    } catch (error: any) {
      this.logger_.error(
        `‚ùå Error en verificaci√≥n de DNI/NIE: ${error?.message || error}`
      );

      // ‚úÖ FALLBACK PERMISIVO PARA REVERSO EN CASO DE ERROR T√âCNICO
      if (documentSide === "back") {
        this.logger_.info("üîÑ ERROR T√âCNICO - FALLBACK PERMISIVO PARA REVERSO");
        return {
          isValid: true,
          extractedData: {
            //@ts-ignore
            documentSide: "back",
            technicalErrorFallback: true,
          },
          confidence: 60,
          issues: [
            "Error t√©cnico - aplicado fallback permisivo para reverso DNI/NIE",
          ],
          imageQuality: "fair",
        };
      }

      return {
        isValid: false,
        extractedData: {},
        confidence: 0,
        issues: ["Error t√©cnico al procesar la imagen"],
        imageQuality: "poor",
      };
    }
  }

  async verifyDocument(
    imageBase64: string,
    documentType: DocumentType
  ): Promise<VerificationResult> {
    this.logger_.info(`üîç Verificando documento tipo: ${documentType}`);

    switch (documentType) {
      case "dni_front":
        return this.verifyIdentityDocument(imageBase64, "front");
      case "dni_back":
        return this.verifyIdentityDocument(imageBase64, "back");
      case "bank_certificate":
      case "bank_statement":
        return this.verifyBankDocument(imageBase64, documentType);
      case "payroll":
        return this.verifyPayrollDocument(imageBase64);
      default:
        throw new Error(`Tipo de documento no soportado: ${documentType}`);
    }
  }

  async verifyBankDocument(
    documentBase64: string,
    documentType: "bank_certificate" | "bank_statement"
  ): Promise<VerificationResult> {
    try {
      this.logger_.info(
        `üè¶ Verificando documento bancario: ${documentType}...`
      );

      // Detectar si es PDF o imagen
      const buffer = Buffer.from(documentBase64, "base64");
      const formatInfo = this.detectFileFormatFromBuffer(buffer);

      this.logger_.info(
        `üìÑ Formato detectado: ${formatInfo.mimeType} (m√©todo: ${formatInfo.method})`
      );

      // Si es PDF, usar OpenAI File API como en payroll
      if (formatInfo.mimeType === "application/pdf") {
        this.logger_.info(
          "üìÑ Detectado PDF, procesando con OpenAI File API..."
        );
        return await this.processPdfBank(documentBase64, documentType);
      }

      // Para im√°genes, definir variables necesarias
      const finalMimeType = formatInfo.mimeType;
      const finalBase64 = documentBase64;

      const prompt = `Analiza este documento de un ${
        documentType === "bank_certificate"
          ? "certificado bancario"
          : "extracto bancario"
      } y extrae la siguiente informaci√≥n:

VALIDACIONES IMPORTANTES:
1. ¬øEs un documento bancario oficial v√°lido y legible?
2. ¬øContiene el logo o membrete de un banco reconocido?
3. ¬øLos textos est√°n claramente legibles sin borrosidad?
4. ¬øTiene formato oficial de documento bancario?
5. ¬øHay signos de falsificaci√≥n, manipulaci√≥n o edici√≥n digital?

INFORMACI√ìN A EXTRAER:
- Nombre del banco
- Titular de la cuenta
- IBAN o n√∫mero de cuenta
- Tipo de documento (certificado/extracto)
- Fecha de emisi√≥n
- Saldo o balance (si aplica)`;

      const jsonFormat = `{
  "isValid": false,
  "extractedData": {
    "bankName": null,
    "accountHolder": null,
    "iban": null,
    "accountNumber": null,
    "documentType": "${documentType}",
    "issueDate": null,
    "balance": null
  },
  "confidence": 0,
  "issues": ["La imagen no es un documento bancario v√°lido o no se puede procesar"],
  "imageQuality": "poor"
}`;

      const response = await this.openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Eres un experto en verificaci√≥n de documentos bancarios espa√±oles. 
             SIEMPRE responde con JSON v√°lido, sin excepci√≥n.`,
          },
          {
            role: "user",
            content: [
              {
                type: "text",
                text: `${prompt}

FORMATO DE RESPUESTA OBLIGATORIO - USA ESTA ESTRUCTURA:

${jsonFormat}

- Si el documento S√ç es un documento bancario v√°lido, cambia isValid a true y completa los datos
- confidence debe ser un N√öMERO ENTERO entre 0 y 100
- NUNCA agregues texto antes o despu√©s del JSON
- NUNCA uses markdown o bloques de c√≥digo`,
              },
              {
                type: "image_url",
                image_url: {
                  //@ts-ignore
                  url: `data:${finalMimeType};base64,${finalBase64}`,
                  detail: "high",
                },
              },
            ],
          },
        ],
        max_tokens: 1000,
        temperature: 0,
        response_format: { type: "json_object" },
      });

      const content = response.choices[0].message.content?.trim();

      if (!content) {
        throw new Error("No se recibi√≥ respuesta de OpenAI");
      }

      this.logger_.info(
        `üìÑ Respuesta de OpenAI para documento bancario: ${content}`
      );

      let result: VerificationResult;
      try {
        result = JSON.parse(content);
      } catch (parseError: any) {
        this.logger_.error(`‚ùå Error parseando JSON: ${parseError?.message}`);
        return {
          isValid: false,
          extractedData: {},
          confidence: 0,
          issues: ["Error al procesar la respuesta del an√°lisis"],
          imageQuality: "poor",
        };
      }

      this.logger_.info(
        `‚úÖ Verificaci√≥n documento bancario completada: ${
          result.isValid ? "V√ÅLIDO" : "INV√ÅLIDO"
        } (${result.confidence}% confianza)`
      );

      return result;
    } catch (error: any) {
      this.logger_.error(
        `‚ùå Error en verificaci√≥n de documento bancario: ${
          error?.message || error
        }`
      );

      return {
        isValid: false,
        extractedData: {},
        confidence: 0,
        issues: ["Error t√©cnico al procesar la imagen"],
        imageQuality: "poor",
      };
    }
  }

  async verifyPayrollDocument(
    documentBase64: string
  ): Promise<VerificationResult> {
    try {
      this.logger_.info(`üíº Verificando n√≥mina...`);

      // Detectar si es PDF o imagen
      const buffer = Buffer.from(documentBase64, "base64");
      const formatInfo = this.detectFileFormatFromBuffer(buffer);

      this.logger_.info(
        `üìÑ Formato detectado: ${formatInfo.mimeType} (m√©todo: ${formatInfo.method})`
      );

      // Si es PDF, usar m√©todo especial de OpenAI
      if (formatInfo.mimeType === "application/pdf") {
        return await this.processPdfPayroll(documentBase64);
      }

      // Para im√°genes, usar el m√©todo tradicional
      const prompt = `Analiza este documento de una n√≥mina espa√±ola y extrae la siguiente informaci√≥n:

VALIDACIONES IMPORTANTES:
1. ¬øEs una n√≥mina oficial v√°lida y legible?
2. ¬øContiene el membrete o datos de la empresa empleadora?
3. ¬øLos textos est√°n claramente legibles sin borrosidad?
4. ¬øTiene formato oficial de n√≥mina espa√±ola?
5. ¬øContiene los conceptos t√≠picos de una n√≥mina (salario bruto, retenciones, cotizaciones, etc.)?
6. ¬øHay signos de falsificaci√≥n, manipulaci√≥n o edici√≥n digital?

INFORMACI√ìN A EXTRAER:
- Nombre completo del empleado
- Nombre de la empresa empleadora
- Direcci√≥n de la empresa
- Per√≠odo de la n√≥mina (mes/a√±o)
- Salario bruto
- Salario neto
- N√∫mero de la Seguridad Social
- Fecha de pago
- Horas trabajadas
- Puesto de trabajo
- Departamento
- Retenciones fiscales
- Cotizaciones a la Seguridad Social`;

      const jsonFormat = `{
  "isValid": false,
  "extractedData": {
    "employeeName": null,
    "employerName": null,
    "employerAddress": null,
    "payrollPeriod": null,
    "grossSalary": null,
    "netSalary": null,
    "socialSecurityNumber": null,
    "paymentDate": null,
    "workingHours": null,
    "jobTitle": null,
    "department": null,
    "taxWithholdings": null,
    "socialSecurityContributions": null,
    "hasOfficialPayrollFormat": false
  },
  "confidence": 0,
  "issues": ["La imagen no es una n√≥mina v√°lida o no se puede procesar"],
  "imageQuality": "poor"
}`;

      const response = await this.openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Eres un experto en verificaci√≥n de n√≥minas espa√±olas. 
             Conoces perfectamente el formato oficial de las n√≥minas, los conceptos salariales,
             retenciones fiscales y cotizaciones sociales t√≠picas en Espa√±a.
             SIEMPRE responde con JSON v√°lido, sin excepci√≥n.`,
          },
          {
            role: "user",
            content: [
              {
                type: "text",
                text: `${prompt}

FORMATO DE RESPUESTA OBLIGATORIO - USA ESTA ESTRUCTURA:

${jsonFormat}

INSTRUCCIONES ESPEC√çFICAS PARA N√ìMINAS:
- Si encuentras datos de empleado y empleador = V√ÅLIDO autom√°ticamente
- Si ves conceptos salariales t√≠picos (bruto, neto, retenciones) = V√ÅLIDO
- Si tiene formato oficial de n√≥mina = confidence entre 80-95
- Si solo ves algunos datos pero formato correcto = confidence 60-75
- SOLO marca como inv√°lido si es obviamente otra cosa

CONCEPTOS CLAVE A BUSCAR:
- Salario Base, Complementos, Pagas Extra
- IRPF (retenci√≥n fiscal)
- Cotizaci√≥n SS (Seguridad Social)
- Desempleo, Formaci√≥n Profesional
- Total Devengado, Total Deducciones
- L√≠quido a Percibir

- Si el documento S√ç es una n√≥mina v√°lida, cambia isValid a true y completa los datos
- confidence debe ser un N√öMERO ENTERO entre 0 y 100
- NUNCA agregues texto antes o despu√©s del JSON
- NUNCA uses markdown o bloques de c√≥digo`,
              },
              {
                type: "image_url",
                image_url: {
                  //@ts-ignore
                  url: `data:${finalMimeType};base64,${finalBase64}`,
                  detail: "high",
                },
              },
            ],
          },
        ],
        max_tokens: 1500,
        temperature: 0,
        response_format: { type: "json_object" },
      });

      const content = response.choices[0].message.content?.trim();

      if (!content) {
        throw new Error("No se recibi√≥ respuesta de OpenAI");
      }

      this.logger_.info(
        `üìÑ ========== RESPUESTA COMPLETA DE OPENAI (N√ìMINA) ==========`
      );
      this.logger_.info(content);
      this.logger_.info(`üìÑ ================================================`);

      let result: VerificationResult;
      try {
        let cleanContent = content;

        if (!cleanContent.startsWith("{")) {
          const jsonStart = cleanContent.indexOf("{");
          const jsonEnd = cleanContent.lastIndexOf("}");

          if (jsonStart !== -1 && jsonEnd !== -1) {
            cleanContent = cleanContent.substring(jsonStart, jsonEnd + 1);
          }
        }

        result = JSON.parse(cleanContent);

        if (
          !result.hasOwnProperty("isValid") ||
          !result.hasOwnProperty("confidence")
        ) {
          throw new Error("Estructura JSON inv√°lida");
        }

        // Validaci√≥n adicional para n√≥minas
        if (result.extractedData) {
          // Si encuentra datos b√°sicos de empleado y empleador, muy probable que sea v√°lido
          if (
            result.extractedData.employeeName &&
            result.extractedData.employerName
          ) {
            result.isValid = true;
            if (result.confidence < 70) {
              result.confidence = 80;
            }
            this.logger_.info(
              `üë§ Empleado y empleador encontrados - FORZANDO V√ÅLIDO`
            );
          }

          // Si encuentra salarios, probablemente v√°lido
          if (
            result.extractedData.grossSalary &&
            result.extractedData.netSalary
          ) {
            result.isValid = true;
            if (result.confidence < 75) {
              result.confidence = 85;
            }
            this.logger_.info(`üí∞ Salarios encontrados - AUMENTANDO CONFIANZA`);
          }

          // Si tiene formato oficial de n√≥mina
          if (
            result.extractedData.hasOfficialPayrollFormat &&
            result.confidence < 60
          ) {
            result.confidence = 70;
            this.logger_.info(
              `üìã Formato oficial detectado - AUMENTANDO CONFIANZA`
            );
          }
        }
      } catch (parseError: any) {
        this.logger_.error(
          `‚ùå Error parseando JSON de OpenAI: ${parseError?.message}`
        );
        this.logger_.error(`üìÑ Contenido recibido: ${content}`);

        return {
          isValid: false,
          extractedData: {},
          confidence: 0,
          issues: ["Error al procesar la respuesta del an√°lisis"],
          imageQuality: "poor",
        };
      }

      this.logger_.info(
        `‚úÖ Verificaci√≥n n√≥mina completada: ${
          result.isValid ? "V√ÅLIDO" : "INV√ÅLIDO"
        } (${result.confidence}% confianza)`
      );

      // Logging detallado de datos extra√≠dos
      if (result.extractedData) {
        this.logger_.info(`üìã ========== DATOS DE LA N√ìMINA ==========`);
        if (result.extractedData.employeeName)
          this.logger_.info(
            `   üë§ Empleado: ${result.extractedData.employeeName}`
          );
        if (result.extractedData.employerName)
          this.logger_.info(
            `   üè¢ Empresa: ${result.extractedData.employerName}`
          );
        if (result.extractedData.payrollPeriod)
          this.logger_.info(
            `   üìÖ Per√≠odo: ${result.extractedData.payrollPeriod}`
          );
        if (result.extractedData.grossSalary)
          this.logger_.info(
            `   üí∞ Salario bruto: ${result.extractedData.grossSalary}`
          );
        if (result.extractedData.netSalary)
          this.logger_.info(
            `   üíµ Salario neto: ${result.extractedData.netSalary}`
          );
        if (result.extractedData.jobTitle)
          this.logger_.info(`   üíº Puesto: ${result.extractedData.jobTitle}`);
        this.logger_.info(`üìã =====================================`);
      }

      if (result.issues && result.issues.length > 0) {
        this.logger_.info(`üìã ========== RAZONES DE RECHAZO ==========`);
        result.issues.forEach((issue, index) => {
          this.logger_.info(`   ${index + 1}. ${issue}`);
        });
        this.logger_.info(`üìã =========================================`);
      }

      return result;
    } catch (error: any) {
      this.logger_.error(
        `‚ùå Error en verificaci√≥n de n√≥mina: ${error?.message || error}`
      );

      return {
        isValid: false,
        extractedData: {},
        confidence: 0,
        issues: ["Error t√©cnico al procesar la imagen"],
        imageQuality: "poor",
      };
    }
  }

  private async processPdfPayroll(
    pdfBase64: string
  ): Promise<VerificationResult> {
    try {
      this.logger_.info("üìÑ Procesando n√≥mina en PDF con OpenAI File API...");

      const prompt = `Analiza este documento PDF de una n√≥mina espa√±ola y extrae la siguiente informaci√≥n:

VALIDACIONES IMPORTANTES:
1. ¬øEs una n√≥mina oficial v√°lida y legible?
2. ¬øContiene el membrete o datos de la empresa empleadora?
3. ¬øLos textos est√°n claramente legibles sin borrosidad?
4. ¬øTiene formato oficial de n√≥mina espa√±ola?
5. ¬øContiene los conceptos t√≠picos de una n√≥mina (salario bruto, retenciones, cotizaciones, etc.)?
6. ¬øHay signos de falsificaci√≥n, manipulaci√≥n o edici√≥n digital?

INFORMACI√ìN A EXTRAER:
- Nombre completo del empleado
- Nombre de la empresa empleadora
- Direcci√≥n de la empresa
- Per√≠odo de la n√≥mina (mes/a√±o)
- Salario bruto
- Salario neto
- N√∫mero de la Seguridad Social
- Fecha de pago
- Horas trabajadas
- Puesto de trabajo
- Departamento
- Retenciones fiscales
- Cotizaciones a la Seguridad Social`;

      const jsonFormat = `{
  "isValid": false,
  "extractedData": {
    "employeeName": null,
    "employerName": null,
    "employerAddress": null,
    "payrollPeriod": null,
    "grossSalary": null,
    "netSalary": null,
    "socialSecurityNumber": null,
    "paymentDate": null,
    "workingHours": null,
    "jobTitle": null,
    "department": null,
    "taxWithholdings": null,
    "socialSecurityContributions": null,
    "hasOfficialPayrollFormat": false
  },
  "confidence": 0,
  "issues": ["La imagen no es una n√≥mina v√°lida o no se puede procesar"],
  "imageQuality": "poor"
}`;

      const fullPrompt = `${prompt}

FORMATO DE RESPUESTA OBLIGATORIO - USA ESTA ESTRUCTURA JSON:

${jsonFormat}

INSTRUCCIONES ESPEC√çFICAS PARA N√ìMINAS:
- Si encuentras datos de empleado y empleador = V√ÅLIDO autom√°ticamente
- Si ves conceptos salariales t√≠picos (bruto, neto, retenciones) = V√ÅLIDO
- Si tiene formato oficial de n√≥mina = confidence entre 80-95
- Si solo ves algunos datos pero formato correcto = confidence 60-75
- SOLO marca como inv√°lido si es obviamente otra cosa

CONCEPTOS CLAVE A BUSCAR:
- Salario Base, Complementos, Pagas Extra
- IRPF (retenci√≥n fiscal)
- Cotizaci√≥n SS (Seguridad Social)
- Desempleo, Formaci√≥n Profesional
- Total Devengado, Total Deducciones
- L√≠quido a Percibir

- Si el documento S√ç es una n√≥mina v√°lida, cambia isValid a true y completa los datos
- confidence debe ser un N√öMERO ENTERO entre 0 y 100
- NUNCA agregues texto antes o despu√©s del JSON
- NUNCA uses markdown o bloques de c√≥digo`;

      const response = await this.analyzePdfWithOpenAI(pdfBase64, fullPrompt);

      // Procesar respuesta
      let result: VerificationResult;
      try {
        let cleanContent = response;

        if (!cleanContent.startsWith("{")) {
          const jsonStart = cleanContent.indexOf("{");
          const jsonEnd = cleanContent.lastIndexOf("}");

          if (jsonStart !== -1 && jsonEnd !== -1) {
            cleanContent = cleanContent.substring(jsonStart, jsonEnd + 1);
          }
        }

        result = JSON.parse(cleanContent);

        if (
          !result.hasOwnProperty("isValid") ||
          !result.hasOwnProperty("confidence")
        ) {
          throw new Error("Estructura JSON inv√°lida");
        }

        // Validaci√≥n adicional para n√≥minas
        if (result.extractedData) {
          if (
            result.extractedData.employeeName &&
            result.extractedData.employerName
          ) {
            result.isValid = true;
            if (result.confidence < 70) {
              result.confidence = 80;
            }
            this.logger_.info(
              `üë§ Empleado y empleador encontrados - FORZANDO V√ÅLIDO`
            );
          }

          if (
            result.extractedData.grossSalary &&
            result.extractedData.netSalary
          ) {
            result.isValid = true;
            if (result.confidence < 75) {
              result.confidence = 85;
            }
            this.logger_.info(`üí∞ Salarios encontrados - AUMENTANDO CONFIANZA`);
          }

          if (
            result.extractedData.hasOfficialPayrollFormat &&
            result.confidence < 60
          ) {
            result.confidence = 70;
            this.logger_.info(
              `üìã Formato oficial detectado - AUMENTANDO CONFIANZA`
            );
          }
        }
      } catch (parseError: any) {
        this.logger_.error(
          `‚ùå Error parseando JSON de PDF: ${parseError?.message}`
        );
        return {
          isValid: false,
          extractedData: {},
          confidence: 0,
          issues: ["Error al procesar la respuesta del an√°lisis del PDF"],
          imageQuality: "poor",
        };
      }

      this.logger_.info(
        `‚úÖ Verificaci√≥n PDF completada: ${
          result.isValid ? "V√ÅLIDO" : "INV√ÅLIDO"
        } (${result.confidence}% confianza)`
      );

      // Logging detallado de datos extra√≠dos
      if (result.extractedData) {
        this.logger_.info(`üìã ========== DATOS DE LA N√ìMINA PDF ==========`);
        if (result.extractedData.employeeName)
          this.logger_.info(
            `   üë§ Empleado: ${result.extractedData.employeeName}`
          );
        if (result.extractedData.employerName)
          this.logger_.info(
            `   üè¢ Empresa: ${result.extractedData.employerName}`
          );
        if (result.extractedData.payrollPeriod)
          this.logger_.info(
            `   üìÖ Per√≠odo: ${result.extractedData.payrollPeriod}`
          );
        if (result.extractedData.grossSalary)
          this.logger_.info(
            `   üí∞ Salario bruto: ${result.extractedData.grossSalary}`
          );
        if (result.extractedData.netSalary)
          this.logger_.info(
            `   üíµ Salario neto: ${result.extractedData.netSalary}`
          );
        if (result.extractedData.jobTitle)
          this.logger_.info(`   üíº Puesto: ${result.extractedData.jobTitle}`);
        this.logger_.info(`üìã =====================================`);
      }

      return result;
    } catch (error: any) {
      this.logger_.error(
        `‚ùå Error procesando n√≥mina PDF: ${error?.message || error}`
      );
      return {
        isValid: false,
        extractedData: {},
        confidence: 0,
        issues: ["Error t√©cnico al procesar el PDF"],
        imageQuality: "poor",
      };
    }
  }

  private async processPdfBank(
    pdfBase64: string,
    documentType: "bank_certificate" | "bank_statement"
  ): Promise<VerificationResult> {
    try {
      this.logger_.info(
        `üìÑ Procesando documento bancario PDF con OpenAI File API...`
      );

      const prompt = `Analiza este documento PDF de un ${
        documentType === "bank_certificate"
          ? "certificado bancario"
          : "extracto bancario"
      } espa√±ol y extrae la siguiente informaci√≥n:

VALIDACIONES IMPORTANTES:
1. ¬øEs un documento bancario oficial v√°lido y legible?
2. ¬øContiene el logo o membrete de un banco reconocido?
3. ¬øLos textos est√°n claramente legibles sin borrosidad?
4. ¬øTiene formato oficial de documento bancario espa√±ol?
5. ¬øContiene los elementos t√≠picos de un documento bancario?
6. ¬øHay signos de falsificaci√≥n, manipulaci√≥n o edici√≥n digital?

INFORMACI√ìN A EXTRAER:
- Nombre del banco
- Titular de la cuenta
- IBAN o n√∫mero de cuenta
- Tipo de documento (certificado/extracto)
- Fecha de emisi√≥n
- Saldo o balance (si aplica)
- Direcci√≥n del banco
- C√≥digo SWIFT/BIC (si aplica)`;

      const jsonFormat = `{
  "isValid": false,
  "extractedData": {
    "bankName": null,
    "accountHolder": null,
    "iban": null,
    "accountNumber": null,
    "documentType": "${documentType}",
    "issueDate": null,
    "balance": null,
    "bankAddress": null,
    "swiftCode": null
  },
  "confidence": 0,
  "issues": ["El documento no es un documento bancario v√°lido o no se puede procesar"],
  "imageQuality": "poor"
}`;

      const fullPrompt = `${prompt}

FORMATO DE RESPUESTA OBLIGATORIO - USA ESTA ESTRUCTURA JSON:

${jsonFormat}

INSTRUCCIONES ESPEC√çFICAS PARA DOCUMENTOS BANCARIOS:
- Si encuentras nombre del banco y titular = V√ÅLIDO autom√°ticamente
- Si ves IBAN o n√∫mero de cuenta = V√ÅLIDO
- Si tiene formato oficial bancario = confidence entre 80-95
- Si solo ves algunos datos pero formato correcto = confidence 60-75
- SOLO marca como inv√°lido si es obviamente otra cosa

ELEMENTOS CLAVE A BUSCAR:
- Logo bancario oficial
- Membrete del banco
- IBAN (ES + 22 d√≠gitos)
- Nombre completo del titular
- Fecha de emisi√≥n del documento
- Sello o firma digital del banco

- Si el documento S√ç es un documento bancario v√°lido, cambia isValid a true y completa los datos
- confidence debe ser un N√öMERO ENTERO entre 0 y 100
- NUNCA agregues texto antes o despu√©s del JSON
- NUNCA uses markdown o bloques de c√≥digo`;

      const response = await this.analyzePdfWithOpenAI(pdfBase64, fullPrompt);

      // Procesar respuesta
      let result: VerificationResult;
      try {
        let cleanContent = response;

        if (!cleanContent.startsWith("{")) {
          const jsonStart = cleanContent.indexOf("{");
          const jsonEnd = cleanContent.lastIndexOf("}");

          if (jsonStart !== -1 && jsonEnd !== -1) {
            cleanContent = cleanContent.substring(jsonStart, jsonEnd + 1);
          }
        }

        // Mejorar limpieza de JSON para documentos bancarios
        try {
          result = JSON.parse(cleanContent);
        } catch (parseAttempt1) {
          // Intentar encontrar el primer JSON v√°lido completo
          let bracketCount = 0;
          let validJsonEnd = -1;
          const jsonStart = cleanContent.indexOf("{");

          for (let i = jsonStart; i < cleanContent.length; i++) {
            if (cleanContent[i] === "{") bracketCount++;
            if (cleanContent[i] === "}") {
              bracketCount--;
              if (bracketCount === 0) {
                validJsonEnd = i;
                break;
              }
            }
          }

          if (validJsonEnd !== -1) {
            cleanContent = cleanContent.substring(jsonStart, validJsonEnd + 1);
            result = JSON.parse(cleanContent);
          } else {
            throw parseAttempt1;
          }
        }

        if (
          !result.hasOwnProperty("isValid") ||
          !result.hasOwnProperty("confidence")
        ) {
          throw new Error("Estructura JSON inv√°lida");
        }

        if (
          typeof result.confidence !== "number" ||
          result.confidence < 0 ||
          result.confidence > 100
        ) {
          result.confidence = 50;
        }

        if (!result.extractedData) {
          result.extractedData = {};
        }

        if (!result.issues) {
          result.issues = [];
        }

        if (!result.imageQuality) {
          result.imageQuality =
            result.confidence > 80
              ? "excellent"
              : result.confidence > 60
              ? "good"
              : result.confidence > 40
              ? "fair"
              : "poor";
        }
      } catch (parseError: any) {
        this.logger_.error(
          `‚ùå Error parseando respuesta JSON del documento bancario: ${parseError?.message}`
        );
        this.logger_.error(
          `üìÑ Respuesta cruda recibida: ${response.substring(0, 500)}...`
        );
        result = {
          isValid: false,
          extractedData: {},
          confidence: 0,
          issues: ["Error al procesar la respuesta del an√°lisis del PDF"],
          imageQuality: "poor",
        };
      }

      this.logger_.info(
        `‚úÖ Verificaci√≥n PDF bancario completada: ${
          result.isValid ? "V√ÅLIDO" : "INV√ÅLIDO"
        } (${result.confidence}% confianza)`
      );

      // Logging detallado de datos extra√≠dos
      if (result.extractedData) {
        this.logger_.info(
          `üè¶ ========== DATOS DEL DOCUMENTO BANCARIO ==========`
        );
        if (result.extractedData.bankName)
          this.logger_.info(`   üèõÔ∏è Banco: ${result.extractedData.bankName}`);
        if (result.extractedData.accountHolder)
          this.logger_.info(
            `   üë§ Titular: ${result.extractedData.accountHolder}`
          );
        if (result.extractedData.iban)
          this.logger_.info(`   üí≥ IBAN: ${result.extractedData.iban}`);
        if (result.extractedData.issueDate)
          this.logger_.info(
            `   üìÖ Fecha emisi√≥n: ${result.extractedData.issueDate}`
          );
        if (result.extractedData.balance)
          this.logger_.info(`   üí∞ Saldo: ${result.extractedData.balance}`);
        this.logger_.info(`üè¶ ==========================================`);
      }

      return result;
    } catch (error: any) {
      this.logger_.error(
        `‚ùå Error procesando documento bancario PDF: ${error?.message || error}`
      );
      return {
        isValid: false,
        extractedData: {},
        confidence: 0,
        issues: ["Error t√©cnico al procesar el PDF"],
        imageQuality: "poor",
      };
    }
  }

  // ‚úÖ AN√ÅLISIS DE PDF CON OPENAI FILE API
  private async analyzePdfWithOpenAI(
    pdfBase64: string,
    prompt: string
  ): Promise<any> {
    try {
      this.logger_.info("üìÑ Analizando PDF usando OpenAI File API...");

      // Crear archivo temporal
      const tempDir = process.env.TEMP || "/tmp";
      const tempFilePath = path.join(tempDir, `document_${Date.now()}.pdf`);

      // Escribir PDF a archivo temporal
      fs.writeFileSync(tempFilePath, Buffer.from(pdfBase64, "base64"));

      // Subir archivo a OpenAI
      const file = await this.openai.files.create({
        file: fs.createReadStream(tempFilePath),
        purpose: "assistants",
      });

      this.logger_.info(`üì§ Archivo subido a OpenAI: ${file.id}`);

      // ‚úÖ USAR ASSISTANT COMPARTIDO EN LUGAR DE CREAR UNO NUEVO
      const assistant = await this.getOrCreateSharedAssistant();

      // Crear hilo de conversaci√≥n
      const { id: threadId } = await this.openai.beta.threads.create();

      this.logger_.info(`üßµ Thread creado: ${threadId}`);

      // Crear mensaje en el thread
      await this.openai.beta.threads.messages.create(threadId, {
        role: "user",
        content: prompt,
        attachments: [
          {
            file_id: file.id,
            tools: [{ type: "file_search" }],
          },
        ],
      });

      // Ejecutar an√°lisis
      const { id: runId } = await this.openai.beta.threads.runs.create(
        threadId,
        {
          assistant_id: assistant.id,
        }
      );

      this.logger_.info(`üèÉ Run creado: ${runId}`);

      // Usar m√©todo con fallback autom√°tico para compatibilidad
      let runStatus;
      try {
        //@ts-ignore
        runStatus = await this.openai.beta.threads.runs.retrieve(
          threadId,
          //@ts-ignore

          runId
        );
      } catch (retrieveError: any) {
        // Fallback autom√°tico para versi√≥n espec√≠fica de la librer√≠a OpenAI
        try {
          runStatus = await this.openai.beta.threads.runs.retrieve(runId, {
            thread_id: threadId,
          });
        } catch (altError: any) {
          this.logger_.error(
            `‚ùå Error obteniendo estado del run: ${retrieveError.message}`
          );
          throw retrieveError;
        }
      }
      let attempts = 0;
      const maxAttempts = 30; // 30 segundos m√°ximo

      this.logger_.info(
        `‚è≥ Esperando resultado del an√°lisis (estado inicial: ${runStatus.status})`
      );

      while (
        (runStatus.status === "queued" || runStatus.status === "in_progress") &&
        attempts < maxAttempts
      ) {
        await new Promise((resolve) => setTimeout(resolve, 1000));

        // Actualizar estado del run con fallback autom√°tico
        try {
          //@ts-ignore
          runStatus = await this.openai.beta.threads.runs.retrieve(
            threadId,
            //@ts-ignore
            runId
          );
        } catch (loopRetrieveError: any) {
          // Fallback autom√°tico
          try {
            runStatus = await this.openai.beta.threads.runs.retrieve(runId, {
              thread_id: threadId,
            });
          } catch (altLoopError: any) {
            throw loopRetrieveError;
          }
        }
        attempts++;

        if (attempts % 5 === 0) {
          this.logger_.info(
            `‚è≥ An√°lisis en progreso... (intento ${attempts}/${maxAttempts}, estado: ${runStatus.status})`
          );
        }
      }

      this.logger_.info(
        `üèÅ An√°lisis completado con estado: ${runStatus.status}`
      );

      if (runStatus.status === "completed") {
        const messages = await this.openai.beta.threads.messages.list(threadId);
        const response = messages.data[0].content[0];

        this.logger_.info(`üì• Respuesta recibida, tipo: ${response.type}`);

        // ‚úÖ LIMPIAR RECURSOS PERO MANTENER EL ASSISTANT COMPARTIDO
        await this.cleanupOpenAIResources(file.id, null, threadId); // null = no eliminar assistant
        if (fs.existsSync(tempFilePath)) {
          fs.unlinkSync(tempFilePath);
        }

        // @ts-ignore
        return response.text?.value || "";
      } else if (runStatus.status === "failed") {
        this.logger_.error(
          `‚ùå An√°lisis fall√≥: ${JSON.stringify(runStatus.last_error)}`
        );
        throw new Error(
          `An√°lisis fall√≥: ${
            runStatus.last_error?.message || "Error desconocido"
          }`
        );
      } else if (attempts >= maxAttempts) {
        throw new Error(`An√°lisis expir√≥ despu√©s de ${maxAttempts} segundos`);
      } else {
        throw new Error(
          `An√°lisis termin√≥ con estado inesperado: ${runStatus.status}`
        );
      }
    } catch (error: any) {
      this.logger_.error(`‚ùå Error analizando PDF: ${error.message}`);

      // Intentar limpiar recursos incluso si hay error
      try {
        //@ts-ignore
        if (tempFilePath && fs.existsSync(tempFilePath)) {
          //@ts-ignore
          fs.unlinkSync(tempFilePath);
        }
      } catch (cleanupError) {
        //@ts-ignore
        this.logger_.warn("Error limpiando archivo temporal:", cleanupError);
      }

      throw error;
    }
  }

  private async cleanupOpenAIResources(
    fileId: string,
    assistantId: string | null,
    threadId: string
  ) {
    try {
      this.logger_.info("üßπ Limpiando recursos de OpenAI...");

      const cleanupPromises = [];

      if (fileId) {
        cleanupPromises.push(
          //@ts-ignore
          this.openai.files.del(fileId).catch((err) =>
            //@ts-ignore
            this.logger_.warn(
              `Error eliminando archivo ${fileId}:`,
              //@ts-ignore
              err.message
            )
          )
        );
      }

      // ‚úÖ SOLO ELIMINAR ASSISTANT SI NO ES EL COMPARTIDO (assistantId !== null)
      if (assistantId) {
        cleanupPromises.push(
          //@ts-ignore
          this.openai.beta.assistants.del(assistantId).catch((err) =>
            //@ts-ignore
            this.logger_.warn(
              `Error eliminando asistente ${assistantId}:`,
              //@ts-ignore
              err.message
            )
          )
        );
        this.logger_.info(`üóëÔ∏è Eliminando assistant temporal: ${assistantId}`);
      } else {
        this.logger_.info("‚ôªÔ∏è Manteniendo assistant compartido");
      }

      await Promise.allSettled(cleanupPromises);
      this.logger_.info("üßπ Recursos de OpenAI limpiados");
    } catch (error: any) {
      //@ts-ignore
      this.logger_.warn(
        "Advertencia limpiando recursos OpenAI:",
        //@ts-ignore
        error.message
      );
    }
  }

  // ‚úÖ DETECCI√ìN DE FORMATO POR MAGIC BYTES
  private detectFileFormatFromBuffer(buffer: Buffer): {
    mimeType: string;
    defaultName: string;
    method: string;
  } {
    const magicBytes = buffer.slice(0, 8);

    // PDF magic bytes: %PDF
    if (magicBytes.toString("ascii", 0, 4) === "%PDF") {
      return {
        mimeType: "application/pdf",
        defaultName: "documento.pdf",
        method: "magic_bytes_pdf",
      };
    }

    // JPEG magic bytes: FF D8
    if (magicBytes[0] === 0xff && magicBytes[1] === 0xd8) {
      return {
        mimeType: "image/jpeg",
        defaultName: "documento.jpg",
        method: "magic_bytes_jpeg",
      };
    }

    // PNG magic bytes: 89 50 4E 47
    if (
      magicBytes[0] === 0x89 &&
      magicBytes[1] === 0x50 &&
      magicBytes[2] === 0x4e &&
      magicBytes[3] === 0x47
    ) {
      return {
        mimeType: "image/png",
        defaultName: "documento.png",
        method: "magic_bytes_png",
      };
    }

    // Fallback: asumir PDF para documentos bancarios
    return {
      mimeType: "application/pdf",
      defaultName: "documento.pdf",
      method: "fallback_pdf",
    };
  }

  // M√©todo adicional para verificar ambos lados
  async verifyBothSides(
    frontImageBase64: string,
    backImageBase64: string
  ): Promise<{
    front: VerificationResult;
    back: VerificationResult;
    crossValidation: {
      isConsistent: boolean;
      issues: string[];
    };
  }> {
    this.logger_.info("üîÑ Verificando ambos lados del DNI/NIE...");

    const [frontResult, backResult] = await Promise.all([
      this.verifyIdentityDocument(frontImageBase64, "front"),
      this.verifyIdentityDocument(backImageBase64, "back"),
    ]);

    // Cross-validation b√°sica
    const crossValidation = {
      isConsistent: true,
      issues: [] as string[],
    };

    // Verificar que ambos sean v√°lidos
    if (!frontResult.isValid || !backResult.isValid) {
      crossValidation.isConsistent = false;
      crossValidation.issues.push(
        "Uno o ambos lados del documento no son v√°lidos"
      );
    }

    // Verificar calidad de imagen
    if (
      frontResult.imageQuality === "poor" ||
      backResult.imageQuality === "poor"
    ) {
      crossValidation.issues.push(
        "La calidad de una o ambas im√°genes es deficiente"
      );
    }

    this.logger_.info("‚úÖ Cross-validation completada");

    return {
      front: frontResult,
      back: backResult,
      crossValidation,
    };
  }

  // ‚úÖ LIMPIAR EL ASSISTANT COMPARTIDO AL CERRAR EL SERVICIO
  async cleanup() {
    if (this.sharedAssistant && this.assistantInitialized) {
      try {
        this.logger_.info(
          "üßπ Limpiando assistant compartido al cerrar servicio..."
        );
        //@ts-ignore
        await this.openai.beta.assistants.del(this.sharedAssistant.id);
        this.sharedAssistant = null;
        this.assistantInitialized = false;
        this.logger_.info("‚úÖ Assistant compartido eliminado");
      } catch (error: any) {
        //@ts-ignore
        this.logger_.warn(
          "Advertencia limpiando assistant compartido:",
          //@ts-ignore
          error.message
        );
      }
    }
  }

  // M√©todo para obtener el estado del servicio
  async getServiceStatus() {
    return {
      service: "Document Verification Module",
      status: "healthy",
      hasApiKey: !!process.env.OPENAI_API_KEY,
      hasSharedAssistant: !!this.sharedAssistant,
      assistantInitialized: this.assistantInitialized,
      timestamp: new Date().toISOString(),
    };
  }
}
