import { Container, Heading, Table, Badge, Text, Button } from "@medusajs/ui";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { defineRouteConfig } from "@medusajs/admin-sdk";
import { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import {
  Eye,
  Download,
  Filter,
  Search,
  ChevronLeft,
  ChevronRight,
  Edit,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { sdk } from "../../lib/sdk";
import Whatsapp from "../../components/whatsapp";
import EditableField from "../../components/editable-field";

type FinancingData = {
  id: string;
  email: string;
  identity_front_file_id: string;
  identity_back_file_id: string;
  income: string;
  paysheet_file_id: string | null;
  contract_type: string;
  company_position: string | null;
  company_start_date: string | null;
  freelance_rental_file_id: string | null;
  freelance_quote_file_id: string | null;
  freelance_start_date: string | null;  // Nueva fecha de alta de aut√≥nomos
  pensioner_proof_file_id: string | null;
  bank_account_proof_file_id: string | null;
  financing_installment_count: string;
  housing_type: string;
  housing_type_details: string | null;
  civil_status: string;
  marital_status_details: string | null;
  address: string;
  postal_code: string;
  city: string;
  province: string;
  phone_mumber: string;
  doubts: string | null;
  requested_at: string;
  created_at: string;
  dni_front_verification?: any;
  dni_back_verification?: any;
  payroll_verification?: any;
  bank_verification?: any;
  status: string;
  admin_notes?: string | null;
  contacted?: boolean;
};

const FinancingPage = () => {
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const [selectedRequest, setSelectedRequest] = useState<FinancingData | null>(
    null
  );
  const [filterByContractType, setFilterByContractType] = useState<string>("");
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [filterByStatus, setFilterByStatus] = useState<string>("");
  const [filterByContacted, setFilterByContacted] = useState<string>("");
  const [showCancelledDelivered, setShowCancelledDelivered] = useState<boolean>(false);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const itemsPerPage = 30;
  const [adminNotes, setAdminNotes] = useState<string>("");
  const [isSavingNotes, setIsSavingNotes] = useState<boolean>(false);
  
  // Estados para acorde√≥n de datos extra√≠dos
  const [showExtractedData, setShowExtractedData] = useState<boolean>(false);
  const [manualDniMode, setManualDniMode] = useState<boolean>(false);

  // Reset manual mode when selected request changes
  useEffect(() => {
    setManualDniMode(false);
    setShowExtractedData(false);
  }, [selectedRequest?.id]);

  // Reset p√°gina cuando cambian los filtros
  useEffect(() => {
    setCurrentPage(1);
  }, [filterByContractType, searchTerm, filterByStatus, filterByContacted, showCancelledDelivered]);

  // Revisar URL parameters para abrir solicitud espec√≠fica
  useEffect(() => {
    const requestId = searchParams.get('id');
    if (requestId && !selectedRequest) {
      // Si hay un ID en la URL, buscar y abrir esa solicitud
      loadSpecificRequest(requestId);
    }
  }, [searchParams]);

  const loadSpecificRequest = async (requestId: string) => {
    try {
      const response = await sdk.client.fetch(`/admin/financing-data/${requestId}`, {
        method: "GET",
      });
      
      //@ts-ignore
      if (response && response.data) {
      //@ts-ignore

        setSelectedRequest(response.data);
        // Opcional: limpiar el par√°metro de la URL despu√©s de cargar
        // setSearchParams({});
      }
    } catch (error) {
      console.error("Error cargando solicitud espec√≠fica:", error);
    }
  };

  // Cargar las notas cuando se selecciona una solicitud
  useEffect(() => {
    if (selectedRequest) {
      setAdminNotes(selectedRequest.admin_notes || "");
    }
  }, [selectedRequest]);

  const {
    data: financingData,
    isLoading,
    error,
    refetch,
  } = useQuery<{ financing_data: FinancingData[] }>({
    queryKey: ["financing-data"],
    queryFn: async () => {
      const response = await sdk.client.fetch("/admin/financing-data", {
        method: "GET",
      });
      return response as { financing_data: FinancingData[] };
    },
  });

  // Sincronizar selectedRequest cuando se actualizan los datos
  useEffect(() => {
    if (selectedRequest && financingData?.financing_data) {
      const updatedRequest = financingData.financing_data.find(
        item => item.id === selectedRequest.id
      );
      if (updatedRequest) {
        setSelectedRequest(updatedRequest);
      }
    }
  }, [financingData?.financing_data]);

  const downloadAllDocuments = async (request: FinancingData) => {
    console.log("üçé Iniciando descarga en:", navigator.platform || "Plataforma desconocida");
    const documents = [
      { url: request.identity_front_file_id, name: "DNI_anverso" },
      { url: request.identity_back_file_id, name: "DNI_reverso" },
      { url: request.freelance_rental_file_id, name: "declaracion_renta" },
      { url: request.freelance_quote_file_id, name: "cuota_autonomos" },
      { url: request.pensioner_proof_file_id, name: "justificante_pension" },
      {
        url: request.bank_account_proof_file_id,
        name: "justificante_bancario",
      },
    ].filter((doc) => doc.url); // Solo documentos que existen

    // Manejar n√≥minas m√∫ltiples (URLs separadas por |)
    if (request.paysheet_file_id) {
      const payrollUrls = request.paysheet_file_id.split("|");
      payrollUrls.forEach((url, index) => {
        if (url.trim()) {
          documents.push({
            url: url.trim(),
            name: payrollUrls.length > 1 ? `nomina_${index + 1}` : "nomina",
          });
        }
      });
    }

    if (documents.length === 0) {
      alert("No hay documentos disponibles para descargar");
      return;
    }

    // Crear un prefijo con email y fecha para identificar los archivos
    const emailPrefix = request.email.split("@")[0];
    const datePrefix = new Date(request.requested_at)
      .toISOString()
      .split("T")[0];
    const prefix = `${emailPrefix}_${datePrefix}`;

    // Descargar cada documento
    for (let i = 0; i < documents.length; i++) {
      const doc = documents[i];
      try {
        const response = await fetch(doc.url);
        const blob = await response.blob();

        // Obtener la extensi√≥n del archivo de la URL o usar un default
        const urlParts = doc.url.split(".");
        const extension = urlParts[urlParts.length - 1].split("?")[0] || "jpg";

        // Crear el enlace de descarga
        const downloadUrl = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = downloadUrl;
        link.download = `${prefix}_${doc.name}.${extension}`;
        
        // Asegurar compatibilidad cross-browser
        link.style.display = "none";
        link.target = "_blank";
        link.rel = "noopener noreferrer";

        // Hacer clic autom√°ticamente para descargar
        document.body.appendChild(link);
        
        // Timeout para Safari/Mac
        setTimeout(() => {
          link.click();
          
          // Limpiar despu√©s del clic
          setTimeout(() => {
            document.body.removeChild(link);
            window.URL.revokeObjectURL(downloadUrl);
          }, 100);
        }, 50);

        // Peque√±a pausa entre descargas para no saturar el navegador
        if (i < documents.length - 1) {
          await new Promise((resolve) => setTimeout(resolve, 500));
        }
        
        console.log(`‚úÖ Descargado: ${doc.name}`);
      } catch (error) {
        console.error(`‚ùå Error descargando ${doc.name}:`, error);
        
        // En Mac, mostrar mensaje espec√≠fico si hay problemas
        if (navigator.platform.includes('Mac')) {
          console.warn("üí° Mac: Verifica que las descargas autom√°ticas est√©n habilitadas en Safari");
        }
      }
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("es-ES", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const formatIncome = (income: string) => {
    return new Intl.NumberFormat("es-ES", {
      style: "currency",
      currency: "EUR",
    }).format(Number(income));
  };

  const getContractTypeLabel = (type: string) => {
    const labels = {
      employee: "Empleado",
      employee_permanent: "Fijo",
      employee_temporary: "Temporal",
      freelance: "Aut√≥nomo",
      freelancer: "Aut√≥nomo", // API usa freelancer
      pensioner: "Pensionista",
      unemployed: "Desempleado",
    };
    return labels[type as keyof typeof labels] || type;
  };

  // Mapeos para los options de select
  const getContractTypeOptions = () => [
    { value: 'employee_permanent', label: 'Empleado Fijo' },
    { value: 'employee_temporary', label: 'Empleado Temporal' },
    { value: 'freelancer', label: 'Aut√≥nomo' },
    { value: 'pensioner', label: 'Pensionista' },
    { value: 'unemployed', label: 'Desempleado' }
  ];

  const getCivilStatusOptions = () => [
    { value: 'single', label: 'Soltero/a' },
    { value: 'married', label: 'Casado/a' },
    { value: 'divorced', label: 'Divorciado/a' },
    { value: 'widowed', label: 'Viudo/a' },
    { value: 'domestic_partnership', label: 'Pareja de hecho' }
  ];

  const getHousingTypeOptions = () => [
    { value: 'own', label: 'Propia' },
    { value: 'rent', label: 'Alquiler' },
    { value: 'family', label: 'Familiar' },
    { value: 'other', label: 'Otra' }
  ];

  const getInstallmentOptions = () => [
    { value: '6', label: '6 meses' },
    { value: '12', label: '12 meses' },
    { value: '18', label: '18 meses' },
    { value: '24', label: '24 meses' },
    { value: '36', label: '36 meses' },
    { value: '48', label: '48 meses' }
  ];

  const getContractTypeBadgeColor = (type: string) => {
    const colors = {
      employee_permanent: "text-black dark:text-white border-black",
      employee_temporary: "text-black dark:text-white border-black",
      employee: "text-black dark:text-white border-black",
      freelance: "text-black dark:text-white border-black",
      pensioner: "text-black dark:text-white border-black",
      unemployed: "text-black dark:text-white border-black",
    };
    return colors[type as keyof typeof colors] || "bg-gray-100 text-gray-800";
  };

  const getCivilStatusLabel = (status: string) => {
    const labels = {
      single: "Soltero/a",
      married: "Casado/a",
      divorced: "Divorciado/a",
      widowed: "Viudo/a",
    };
    return labels[status as keyof typeof labels] || status;
  };

  const getHousingTypeLabel = (type: string) => {
    const labels = {
      rent: "Alquiler",
      owned: "Propia (con hipoteca)",
      owned_free: "Propia (sin hipoteca)",
      family: "Familiar",
      other: "Otra",
    };
    return labels[type as keyof typeof labels] || type;
  };

  // Funci√≥n para extraer datos del DNI de las verificaciones
  const extractDniInfo = (request: FinancingData) => {
    let dniData = {
      fullName: null as string | null,
      documentNumber: null as string | null,
      birthDate: null as string | null,
      nationality: null as string | null,
      sex: null as string | null,
      addresses: null as string | null,
    };

    // Intentar obtener datos del DNI frontal primero
    if (request.dni_front_verification?.extractedData) {
      const frontData = request.dni_front_verification.extractedData;
      dniData.fullName = frontData.fullName || null;
      dniData.documentNumber = frontData.documentNumber || null;
      dniData.birthDate = frontData.birthDate || null;
      dniData.nationality = frontData.nationality || null;
      dniData.sex = frontData.sex || null;
    }

    if (request.dni_back_verification?.extractedData) {
      const backData = request.dni_back_verification.extractedData;
      dniData.addresses = backData.addresses || dniData.addresses;
    }

    // Si no hay datos del frontal, intentar con el trasero
    if (!dniData.fullName && request.dni_back_verification?.extractedData) {
      const backData = request.dni_back_verification.extractedData;
      dniData.fullName = backData.fullName || dniData.fullName;
      dniData.documentNumber =
        backData.documentNumber || dniData.documentNumber;
      dniData.birthDate = backData.birthDate || dniData.birthDate;
      dniData.nationality = backData.nationality || dniData.nationality;
      dniData.sex = backData.sex || dniData.sex;
    }

    return dniData;
  };

  // Funci√≥n para extraer datos de la n√≥mina de las verificaciones
  const extractPayrollInfo = (request: FinancingData) => {
    let payrollData = {
      employerName: null as string | null,
      employeeName: null as string | null,
      jobTitle: null as string | null,
      grossSalary: null as string | null,
      netSalary: null as string | null,
      payrollPeriod: null as string | null,
    };

    // Si hay verificaci√≥n combinada de n√≥minas (nueva estructura)
    if (request.payroll_verification?.combined) {
      const primary = request.payroll_verification.primary?.extractedData;
      const secondary = request.payroll_verification.secondary?.extractedData;

      // Usar datos primarios primero, despu√©s secundarios como fallback
      payrollData.employerName =
        primary?.employerName || secondary?.employerName || null;
      payrollData.employeeName =
        primary?.employeeName || secondary?.employeeName || null;
      payrollData.jobTitle = primary?.jobTitle || secondary?.jobTitle || null;
      payrollData.grossSalary =
        primary?.grossSalary || secondary?.grossSalary || null;
      payrollData.netSalary =
        primary?.netSalary || secondary?.netSalary || null;
      payrollData.payrollPeriod =
        primary?.payrollPeriod || secondary?.payrollPeriod || null;
    }
    // Si hay verificaci√≥n simple de n√≥mina (estructura anterior)
    else if (request.payroll_verification?.extractedData) {
      const data = request.payroll_verification.extractedData;
      payrollData.employerName = data.employerName || null;
      payrollData.employeeName = data.employeeName || null;
      payrollData.jobTitle = data.jobTitle || null;
      payrollData.grossSalary = data.grossSalary || null;
      payrollData.netSalary = data.netSalary || null;
      payrollData.payrollPeriod = data.payrollPeriod || null;
    }

    return payrollData;
  };

  // Funci√≥n para crear estructura de datos DNI frontal manual
  const createManualDniFrontData = () => {
    return {
      extractedData: {
        fullName: "",
        documentNumber: "",
        birthDate: "",
        nationality: "ESP",
        sex: "",
        expirationDate: "",
        equipmentNumber: "",
        hasOfficialDesign: true,
        documentSide: "front"
      },
      confidence: 0,
      issues: ["Entrada manual"],
      imageQuality: "manual" as any,
      isValid: true
    };
  };

  // Funci√≥n para crear estructura de datos DNI trasero manual
  const createManualDniBackData = () => {
    return {
      extractedData: {
        addresses: [""],
        birthPlace: "",
        documentSide: "back",
        equipmentNumber: null,
        hasOfficialText: true,
        hasOfficialDesign: true
      },
      confidence: 0,
      issues: ["Entrada manual"],
      imageQuality: "manual" as any,
      isValid: true
    };
  };

  // Funci√≥n para crear estructura de datos DNI manual (mantener compatibilidad)
  const createManualDniData = () => {
    return createManualDniFrontData();
  };

  // Funci√≥n para inicializar datos DNI manuales completos
  const initializeManualDniData = async () => {
    if (!selectedRequest?.id) return;

    try {
      console.log("üîÑ Inicializando datos DNI manuales para ID:", selectedRequest.id);
      
      const manualFrontData = createManualDniFrontData();
      const manualBackData = createManualDniBackData();
      
      // Actualizar ambos campos de verificaci√≥n DNI
      await updateField("dni_front_verification", manualFrontData);
      await updateField("dni_back_verification", manualBackData);
      
      setManualDniMode(true);
      setShowExtractedData(true);
      
    } catch (error) {
      console.error("Error inicializando datos DNI manuales:", error);
    }
  };

  // Funci√≥n para inicializar solo datos DNI trasero manuales
  const initializeManualDniBackData = async () => {
    if (!selectedRequest?.id) return;

    try {
      console.log("üîÑ Inicializando datos DNI trasero manuales para ID:", selectedRequest.id);
      
      const manualBackData = createManualDniBackData();
      
      // Actualizar solo el campo de verificaci√≥n DNI trasero
      await updateField("dni_back_verification", manualBackData);
      
      setShowExtractedData(true);
      
    } catch (error) {
      console.error("Error inicializando datos DNI trasero manuales:", error);
    }
  };

  // Funciones para manejar estados
  const getStatusLabel = (status: string) => {
    const labels = {
      pending: "Sin gestionar",
      budgeted: "Presupuestado",
      missing_docs: "Falta documentaci√≥n",
      denied: "Denegado",
      cancelled: "Cancelada",
      pre_accepted: "Preaceptada",
      under_review: "En revisi√≥n",
      in_force: "En vigor",
      in_software: "En software",
      delivered: "Entregado",
    };
    return labels[status as keyof typeof labels] || status;
  };

  const getStatusColor = (status: string) => {
    const colors = {
      pending: "bg-gray-50 text-yellow-800 border-yellow-200",
      budgeted: "bg-blue-100 text-blue-800 border-blue-200",
      missing_docs: "bg-orange-100 text-orange-800 border-orange-200",
      denied: "bg-red-100 text-red-800 border-red-200",
      cancelled: "bg-gray-100 text-gray-800 border-gray-200",
      pre_accepted: "bg-purple-100 text-purple-800 border-purple-200",
      under_review: "bg-indigo-100 text-indigo-800 border-indigo-200",
      in_force: "bg-green-100 text-green-800 border-green-200",
      in_software: "bg-cyan-100 text-cyan-800 border-cyan-200",
      delivered: "bg-emerald-100 text-emerald-800 border-emerald-200",
    };
    return (
      colors[status as keyof typeof colors] ||
      "bg-gray-100 text-gray-800 border-gray-200"
    );
  };

  const getStatusIcon = (status: string) => {
    const icons = {
      pending: "üïê",
      budgeted: "üí∞",
      missing_docs: "üìã",
      denied: "‚ùå",
      cancelled: "üö´",
      pre_accepted: "üëÄ",
      under_review: "üîç",
      in_force: "‚úÖ",
      in_software: "üíª",
      delivered: "üöÄ",
    };
    return icons[status as keyof typeof icons] || "üìÑ";
  };

  const updateStatus = async (id: string, newStatus: string) => {
    if (!id || id.trim() === "") {
      console.error("‚ùå Error: ID vac√≠o al intentar actualizar estado");
      return;
    }

    try {
      console.log(`üîÑ Actualizando estado para ID: ${id} -> ${newStatus}`);
      const response = await sdk.client.fetch(
        `/store/financing-data/${id}/status`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "x-publishable-api-key":
              "pk_14db1a49297371bf3f8d345db0cf016616d4244f1d593db1050907c88333cd21",
          },
          body: { status: newStatus },
        }
      );

      // Refrescar los datos sin recargar la p√°gina
      refetch();
      console.log(`‚úÖ Estado actualizado exitosamente para ${id}`);
    } catch (error: any) {
      console.error("Error updating status:", error);
      alert("Error al actualizar el estado: " + error.message);
    }
  };

  const saveAdminNotes = async () => {
    if (!selectedRequest?.id) return;

    setIsSavingNotes(true);
    try {
      const response = await sdk.client.fetch(
        `/store/financing-data/${selectedRequest.id}/notes`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "x-publishable-api-key":
              "pk_14db1a49297371bf3f8d345db0cf016616d4244f1d593db1050907c88333cd21",
          },
          body: { admin_notes: adminNotes },
        }
      );

      console.log("‚úÖ Notas guardadas exitosamente");
      // Refrescar los datos para obtener las notas actualizadas
      refetch();
    } catch (error: any) {
      console.error("Error saving notes:", error);
      alert("Error al guardar las notas: " + error.message);
    } finally {
      setIsSavingNotes(false);
    }
  };

  const updateContactedStatus = async (id: string, contacted: boolean) => {
    if (!id || id.trim() === "") {
      console.error(
        "‚ùå Error: ID vac√≠o al intentar actualizar estado de contacto"
      );
      return;
    }

    try {
      console.log(
        `üîÑ Actualizando estado de contacto para ID: ${id} -> ${contacted}`
      );
      const response = await sdk.client.fetch(
        `/store/financing-data/${id}/contacted`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "x-publishable-api-key":
              "pk_14db1a49297371bf3f8d345db0cf016616d4244f1d593db1050907c88333cd21",
          },
          body: { contacted },
        }
      );

      console.log(`‚úÖ Estado de contacto actualizado exitosamente para ${id}`);
      // Refrescar los datos sin recargar la p√°gina
      refetch();
    } catch (error: any) {
      console.error("Error updating contacted status:", error);
      alert("Error al actualizar el estado de contacto: " + error.message);
    }
  };

  // Funci√≥n gen√©rica para actualizar cualquier campo
  const updateField = async (field: string, value: any) => {
    if (!selectedRequest?.id) {
      console.error("‚ùå Error: No hay solicitud seleccionada");
      return;
    }

    try {
      console.log(`üîÑ Actualizando campo ${field} para ID: ${selectedRequest.id} -> ${value}`);
      
      const response = await sdk.client.fetch(
        `/admin/financing-data/${selectedRequest.id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: { [field]: value },
        }
      );

      console.log(`‚úÖ Campo ${field} actualizado exitosamente`);
      
      // Actualizar el selectedRequest en tiempo real para renderizado inmediato
      setSelectedRequest(prev => {
        if (!prev) return prev;
        return {
          ...prev,
          [field]: value
        };
      });
      
      // Tambi√©n refrescar los datos completos
      refetch();
      
    } catch (error: any) {
      console.error(`‚ùå Error actualizando campo ${field}:`, error);
      throw new Error(`Error al actualizar ${field}: ${error.message || 'Error desconocido'}`);
    }
  };


  const hasDocuments = (request: FinancingData) => {
    let count = 0;

    // Contar n√≥minas (puede ser m√∫ltiples con |)
    if (request.paysheet_file_id) {
      const payrollUrls = request.paysheet_file_id
        .split("|")
        .filter((url) => url.trim());
      count += payrollUrls.length;
    }

    // Contar otros documentos
    const otherDocs = [
      request.freelance_rental_file_id,
      request.freelance_quote_file_id,
      request.pensioner_proof_file_id,
      request.bank_account_proof_file_id,
    ];
    count += otherDocs.filter(Boolean).length;

    return count;
  };

  if (isLoading) {
    return (
      <Container className="divide-y p-0">
        <div className="flex items-center justify-between px-6 py-4">
          <Heading level="h2">Solicitudes de Financiaci√≥n</Heading>
        </div>
        <div className="px-6 py-8">
          <Text>Cargando datos...</Text>
        </div>
      </Container>
    );
  }

  if (error) {
    return (
      <Container className="divide-y p-0">
        <div className="flex items-center justify-between px-6 py-4">
          <Heading level="h2">Solicitudes de Financiaci√≥n</Heading>
        </div>
        <div className="px-6 py-8">
          <Text className="text-red-500">Error al cargar los datos</Text>
        </div>
      </Container>
    );
  }

  const financing: FinancingData[] = financingData?.financing_data || [];

  // Ordenar por fecha de creaci√≥n para generar IDs secuenciales consistentes
  const sortedFinancing = [...financing].sort((a, b) => 
    new Date(a.requested_at).getTime() - new Date(b.requested_at).getTime()
  );

  // Crear funci√≥n para obtener ID secuencial
  const getSequentialId = (item: FinancingData) => {
    const index = sortedFinancing.findIndex(f => f.id === item.id);
    return (index + 1).toString().padStart(4, '0');
  };

  // Filtrar por tipo de contrato, estado, contactado y t√©rmino de b√∫squeda
  const filteredFinancing = financing.filter((item) => {
    // Filtro por tipo de contrato
    const matchesContract =
      !filterByContractType || item.contract_type === filterByContractType;

    // Filtro por estado
    const matchesStatus =
      !filterByStatus || (item.status || "pending") === filterByStatus;

    // Filtro por contactado
    const matchesContacted = 
      !filterByContacted || 
      (filterByContacted === "contacted" && item.contacted === true) ||
      (filterByContacted === "not_contacted" && item.contacted !== true);

    // Filtro para canceladas/entregadas/denegadas (por defecto ocultas)
    const status = item.status || "pending";
    const isCancelledOrDeliveredOrDenied = status === "cancelled" || status === "delivered" || status === "denied";
    const matchesCancelledDeliveredFilter = showCancelledDelivered || !isCancelledOrDeliveredOrDenied;

    // Filtro por t√©rmino de b√∫squeda (tel√©fono, email, nombre o n√∫mero de DNI)
    let matchesSearch = true;
    if (searchTerm.trim()) {
      const searchLower = searchTerm.toLowerCase();
      const phoneMatch = item.phone_mumber.toLowerCase().includes(searchLower);
      const emailMatch = item.email.toLowerCase().includes(searchLower);

      // Buscar en los datos extra√≠dos del DNI
      const dniInfo = extractDniInfo(item);
      const nameMatch =
        dniInfo.fullName?.toLowerCase().includes(searchLower) || false;
      const dniNumberMatch = 
        dniInfo.documentNumber?.toLowerCase().includes(searchLower) || false;

      matchesSearch = phoneMatch || emailMatch || nameMatch || dniNumberMatch;
    }

    return matchesContract && matchesStatus && matchesContacted && matchesSearch && matchesCancelledDeliveredFilter;
  });

  // Paginaci√≥n
  const totalPages = Math.ceil(filteredFinancing.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedFinancing = filteredFinancing.slice(startIndex, endIndex);


  if (selectedRequest) {
    return (
      <Container className="divide-y p-0">
        <div className="flex items-center justify-between px-6 py-4">
          <div className="flex items-center gap-4">
            <Button
              variant="secondary"
              size="small"
              onClick={() => {
                setSelectedRequest(null);
                setSearchParams({});
              }}
            >
              ‚Üê Volver
            </Button>
            <Heading level="h2">Detalle de Solicitud</Heading>
          </div>
          <Badge size="small">ID: #{getSequentialId(selectedRequest)}</Badge>
        </div>

        <div className="px-6 py-8 space-y-8">
          {/* Informaci√≥n Personal */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <Heading level="h3" className="text-lg">
                Informaci√≥n Personal
              </Heading>
              <div className="space-y-2">
                {(() => {
                  const dniInfo = extractDniInfo(selectedRequest);
                  return (
                    <>
                      {dniInfo.fullName && (
                        <div>
                          <Text
                            size="small"
                            className="text-gray-600 dark:text-gray-400"
                          >
                            Nombre Completo (DNI)
                          </Text>
                          <Text className="font-medium">
                            {dniInfo.fullName}
                          </Text>
                        </div>
                      )}
                      {dniInfo.documentNumber && (
                        <div>
                          <Text
                            size="small"
                            className="text-gray-600 dark:text-gray-400"
                          >
                            N√∫mero DNI
                          </Text>
                          <Text className="font-medium">
                            {dniInfo.documentNumber}
                          </Text>
                        </div>
                      )}
                      {dniInfo.sex && (
                        <div>
                          <Text
                            size="small"
                            className="text-gray-600 dark:text-gray-400"
                          >
                            Sexo
                          </Text>
                          <Text className="font-medium">{dniInfo.sex}</Text>
                        </div>
                      )}
                      {dniInfo.birthDate && (
                        <div>
                          <Text
                            size="small"
                            className="text-gray-600 dark:text-gray-400"
                          >
                            Fecha de Nacimiento
                          </Text>
                          <Text className="font-medium">
                            {dniInfo.birthDate}
                          </Text>
                        </div>
                      )}
                      {dniInfo.nationality && (
                        <div>
                          <Text
                            size="small"
                            className="text-gray-600 dark:text-gray-400"
                          >
                            Nacionalidad
                          </Text>
                          <Text className="font-medium">
                            {dniInfo.nationality}
                          </Text>
                        </div>
                      )}
                      {dniInfo.sex && (
                        <div>
                          <Text
                            size="small"
                            className="text-gray-600 dark:text-gray-400"
                          >
                            Sexo
                          </Text>
                          <Text className="font-medium">{dniInfo.sex}</Text>
                        </div>
                      )}
                    </>
                  );
                })()}
                
                {/* Bot√≥n para a√±adir datos DNI manualmente cuando no existen */}
                {(!selectedRequest.dni_front_verification?.extractedData && 
                  !selectedRequest.dni_back_verification?.extractedData &&
                  !manualDniMode) && (
                  <div className="space-y-2">
                    <Button
                      variant="secondary"
                      size="small"
                      onClick={initializeManualDniData}
                      className="flex items-center gap-2 bg-orange-50 border-orange-200 text-orange-800 hover:bg-orange-100"
                    >
                      <Edit className="w-4 h-4" />
                      ‚ûï A√±adir Datos DNI Manualmente
                    </Button>
                    <Text size="small" className="text-gray-500">
                      No se detectaron datos extra√≠dos del DNI. Puede a√±adirlos manualmente.
                    </Text>
                  </div>
                )}

                {/* Bot√≥n para a√±adir solo datos DNI trasero cuando existe el frontal */}
                {(selectedRequest.dni_front_verification?.extractedData && 
                  !selectedRequest.dni_back_verification?.extractedData) && (
                  <div className="space-y-2">
                    <Button
                      variant="secondary"
                      size="small"
                      onClick={initializeManualDniBackData}
                      className="flex items-center gap-2 bg-blue-50 border-blue-200 text-blue-800 hover:bg-blue-100"
                    >
                      <Edit className="w-4 h-4" />
                      ‚ûï A√±adir Datos DNI Trasero Manualmente
                    </Button>
                    <Text size="small" className="text-gray-500">
                      Solo se detectaron datos del DNI frontal. Puede a√±adir los del trasero manualmente.
                    </Text>
                  </div>
                )}

                {/* Bot√≥n para mostrar/ocultar datos extra√≠dos */}
                {(selectedRequest.dni_front_verification?.extractedData || 
                  selectedRequest.dni_back_verification?.extractedData ||
                  selectedRequest.payroll_verification?.extractedData ||
                  manualDniMode) && (
                  <div className="space-y-2">
                    <Button
                      variant="secondary"
                      size="small"
                      onClick={() => setShowExtractedData(!showExtractedData)}
                      className="flex items-center gap-2"
                    >
                      <Edit className="w-4 h-4" />
                      Editar Datos Extra√≠dos
                      {showExtractedData ? (
                        <ChevronUp className="w-4 h-4" />
                      ) : (
                        <ChevronDown className="w-4 h-4" />
                      )}
                    </Button>

                    {/* Acorde√≥n con datos extra√≠dos */}
                    {showExtractedData && (
                      <div className="space-y-4 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                        
                        {/* DNI Frontal */}
                        {selectedRequest.dni_front_verification?.extractedData && (
                          <div className="space-y-2 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                            <Text className="font-medium text-sm text-blue-800 dark:text-blue-300 flex items-center gap-2">
                              {selectedRequest.dni_front_verification.issues?.includes("Entrada manual") ? (
                                <>
                                  ‚úèÔ∏è Datos DNI Frontal (Manual)
                                  <span className="px-2 py-1 text-xs bg-orange-100 text-orange-800 rounded-full">MANUAL</span>
                                </>
                              ) : (
                                <>
                                  üìã Datos Extra√≠dos del DNI Frontal
                                  <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">EXTRA√çDO</span>
                                </>
                              )}
                            </Text>
                            
                            <EditableField
                              label="Nombre Completo (DNI)"
                              value={selectedRequest.dni_front_verification.extractedData.fullName}
                              type="text"
                              required={false}
                              onSave={(value) => {
                                const updated = {
                                  ...selectedRequest.dni_front_verification,
                                  extractedData: {
                                    ...selectedRequest.dni_front_verification.extractedData,
                                    fullName: value
                                  }
                                };
                                return updateField("dni_front_verification", updated);
                              }}
                            />
                            
                            <EditableField
                              label="N√∫mero de Documento (DNI)"
                              value={selectedRequest.dni_front_verification.extractedData.documentNumber}
                              type="text"
                              required={false}
                              onSave={(value) => {
                                const updated = {
                                  ...selectedRequest.dni_front_verification,
                                  extractedData: {
                                    ...selectedRequest.dni_front_verification.extractedData,
                                    documentNumber: value
                                  }
                                };
                                return updateField("dni_front_verification", updated);
                              }}
                            />
                            
                            <EditableField
                              label="Fecha de Nacimiento (DNI)"
                              value={selectedRequest.dni_front_verification.extractedData.birthDate}
                              type="text"
                              required={false}
                              placeholder="DD MM YYYY"
                              onSave={(value) => {
                                const updated = {
                                  ...selectedRequest.dni_front_verification,
                                  extractedData: {
                                    ...selectedRequest.dni_front_verification.extractedData,
                                    birthDate: value
                                  }
                                };
                                return updateField("dni_front_verification", updated);
                              }}
                            />
                            
                            <EditableField
                              label="Sexo (DNI)"
                              value={selectedRequest.dni_front_verification.extractedData.sex}
                              type="select"
                              options={[
                                { value: 'M', label: 'Masculino' },
                                { value: 'F', label: 'Femenino' }
                              ]}
                              required={false}
                              onSave={(value) => {
                                const updated = {
                                  ...selectedRequest.dni_front_verification,
                                  extractedData: {
                                    ...selectedRequest.dni_front_verification.extractedData,
                                    sex: value
                                  }
                                };
                                return updateField("dni_front_verification", updated);
                              }}
                            />
                            
                            <EditableField
                              label="Nacionalidad (DNI)"
                              value={selectedRequest.dni_front_verification.extractedData.nationality}
                              type="text"
                              required={false}
                              placeholder="ESP"
                              onSave={(value) => {
                                const updated = {
                                  ...selectedRequest.dni_front_verification,
                                  extractedData: {
                                    ...selectedRequest.dni_front_verification.extractedData,
                                    nationality: value
                                  }
                                };
                                return updateField("dni_front_verification", updated);
                              }}
                            />
                          </div>
                        )}
                        
                        {/* DNI Trasero */}
                        {selectedRequest.dni_back_verification?.extractedData && (
                          <div className="space-y-2 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
                            <Text className="font-medium text-sm text-green-800 dark:text-green-300 flex items-center gap-2">
                              {selectedRequest.dni_back_verification.issues?.includes("Entrada manual") ? (
                                <>
                                  ‚úèÔ∏è Datos DNI Trasero (Manual)
                                  <span className="px-2 py-1 text-xs bg-orange-100 text-orange-800 rounded-full">MANUAL</span>
                                </>
                              ) : (
                                <>
                                  üìã Datos Extra√≠dos del DNI Trasero
                                  <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">EXTRA√çDO</span>
                                </>
                              )}
                            </Text>
                            
                            <EditableField
                              label="Direcci√≥n (DNI Trasero)"
                              value={(() => {
                                const addressData = selectedRequest.dni_back_verification.extractedData.addresses;
                                if (Array.isArray(addressData) && addressData.length > 0) {
                                  return addressData[0] || "";
                                }
                                if (typeof addressData === 'string') {
                                  const streetOnly = addressData.split(',')[0]?.trim() || addressData;
                                  return streetOnly;
                                }
                                return "";
                              })()}
                              type="text"
                              required={false}
                              placeholder="Ej: C. JOSEP BONATERA 44"
                              onSave={(value) => {
                                const updated = {
                                  ...selectedRequest.dni_back_verification,
                                  extractedData: {
                                    ...selectedRequest.dni_back_verification.extractedData,
                                    addresses: [value]
                                  }
                                };
                                return updateField("dni_back_verification", updated);
                              }}
                            />
                            
                            <EditableField
                              label="Lugar de Nacimiento (DNI Trasero)"
                              value={selectedRequest.dni_back_verification.extractedData.birthPlace || ""}
                              type="text"
                              required={false}
                              placeholder="Ej: BARCELONA"
                              onSave={(value) => {
                                const updated = {
                                  ...selectedRequest.dni_back_verification,
                                  extractedData: {
                                    ...selectedRequest.dni_back_verification.extractedData,
                                    birthPlace: value
                                  }
                                };
                                return updateField("dni_back_verification", updated);
                              }}
                            />
                          </div>
                        )}

                        {/* N√≥mina */}
                        {selectedRequest.payroll_verification?.extractedData && (
                          <div className="space-y-2 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                            <Text className="font-medium text-sm text-yellow-800 dark:text-yellow-300">
                              üíº Datos Extra√≠dos de la N√≥mina
                            </Text>
                            
                            {selectedRequest.payroll_verification.extractedData.employerName && (
                              <EditableField
                                label="Nombre de la Empresa (N√≥mina)"
                                value={selectedRequest.payroll_verification.extractedData.employerName}
                                type="text"
                                required={false}
                                onSave={(value) => {
                                  const updated = {
                                    ...selectedRequest.payroll_verification,
                                    extractedData: {
                                      ...selectedRequest.payroll_verification.extractedData,
                                      employerName: value
                                    }
                                  };
                                  return updateField("payroll_verification", updated);
                                }}
                              />
                            )}
                            
                            {selectedRequest.payroll_verification.extractedData.employeeName && (
                              <EditableField
                                label="Nombre del Empleado (N√≥mina)"
                                value={selectedRequest.payroll_verification.extractedData.employeeName}
                                type="text"
                                required={false}
                                onSave={(value) => {
                                  const updated = {
                                    ...selectedRequest.payroll_verification,
                                    extractedData: {
                                      ...selectedRequest.payroll_verification.extractedData,
                                      employeeName: value
                                    }
                                  };
                                  return updateField("payroll_verification", updated);
                                }}
                              />
                            )}
                            
                            {selectedRequest.payroll_verification.extractedData.jobTitle && (
                              <EditableField
                                label="Puesto de Trabajo (N√≥mina)"
                                value={selectedRequest.payroll_verification.extractedData.jobTitle}
                                type="text"
                                required={false}
                                onSave={(value) => {
                                  const updated = {
                                    ...selectedRequest.payroll_verification,
                                    extractedData: {
                                      ...selectedRequest.payroll_verification.extractedData,
                                      jobTitle: value
                                    }
                                  };
                                  return updateField("payroll_verification", updated);
                                }}
                              />
                            )}
                            
                            {selectedRequest.payroll_verification.extractedData.grossSalary && (
                              <EditableField
                                label="Salario Bruto (N√≥mina)"
                                value={typeof selectedRequest.payroll_verification.extractedData.grossSalary === 'string' 
                                  ? selectedRequest.payroll_verification.extractedData.grossSalary.replace(/„Äê[^„Äë]*„Äë/g, '') 
                                  : selectedRequest.payroll_verification.extractedData.grossSalary}
                                type="text"
                                required={false}
                                placeholder="Ej: 2.500,00 ‚Ç¨"
                                onSave={(value) => {
                                  const updated = {
                                    ...selectedRequest.payroll_verification,
                                    extractedData: {
                                      ...selectedRequest.payroll_verification.extractedData,
                                      grossSalary: value
                                    }
                                  };
                                  return updateField("payroll_verification", updated);
                                }}
                              />
                            )}
                            
                            {selectedRequest.payroll_verification.extractedData.netSalary && (
                              <EditableField
                                label="Salario Neto (N√≥mina)"
                                value={typeof selectedRequest.payroll_verification.extractedData.netSalary === 'string' 
                                  ? selectedRequest.payroll_verification.extractedData.netSalary.replace(/„Äê[^„Äë]*„Äë/g, '') 
                                  : selectedRequest.payroll_verification.extractedData.netSalary}
                                type="text"
                                required={false}
                                placeholder="Ej: 2.100,00 ‚Ç¨"
                                onSave={(value) => {
                                  const updated = {
                                    ...selectedRequest.payroll_verification,
                                    extractedData: {
                                      ...selectedRequest.payroll_verification.extractedData,
                                      netSalary: value
                                    }
                                  };
                                  return updateField("payroll_verification", updated);
                                }}
                              />
                            )}
                            
                            {selectedRequest.payroll_verification.extractedData.payrollPeriod && (
                              <EditableField
                                label="Per√≠odo de N√≥mina"
                                value={selectedRequest.payroll_verification.extractedData.payrollPeriod}
                                type="text"
                                required={false}
                                placeholder="Ej: Enero 2024"
                                onSave={(value) => {
                                  const updated = {
                                    ...selectedRequest.payroll_verification,
                                    extractedData: {
                                      ...selectedRequest.payroll_verification.extractedData,
                                      payrollPeriod: value
                                    }
                                  };
                                  return updateField("payroll_verification", updated);
                                }}
                              />
                            )}
                          </div>
                        )}


                      </div>
                    )}
                  </div>
                )}
                
                <EditableField
                  label="Email"
                  value={selectedRequest.email}
                  type="email"
                  required={true}
                  onSave={(value) => updateField("email", value)}
                />
                <div className="space-y-1">
                  <EditableField
                    label="Tel√©fono"
                    value={selectedRequest.phone_mumber}
                    type="text"
                    required={true}
                    onSave={(value) => updateField("phone_mumber", value)}
                  />
                  <a
                    className="bg-green-400 w-1/3 text-sm  flex items-center justify-center rounded-lg p-2 hover:bg-green-200 transition-all duration-150 mt-2"
                    target="_blank"
                    href={`https://wa.me/${
                      selectedRequest.phone_mumber
                    }?text=Hola%20${
                      extractDniInfo(selectedRequest).fullName || ""
                    }`}
                  >
                    Contactar con WhatsApp
                    <Whatsapp className="ml-2 w-5 h-5 hover:scale-100" />
                  </a>
                </div>
                <div className="space-y-2">
                  <EditableField
                    label="Estado Civil"
                    value={selectedRequest.civil_status}
                    type="select"
                    options={getCivilStatusOptions()}
                    required={true}
                    onSave={(value) => updateField("civil_status", value)}
                  />
                  <EditableField
                    label="Detalles Estado Civil"
                    value={selectedRequest.marital_status_details}
                    type="text"
                    required={false}
                    placeholder="Detalles adicionales del estado civil"
                    onSave={(value) => updateField("marital_status_details", value)}
                  />
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <Heading level="h3" className="text-lg">
                Domicilio
              </Heading>
              <div className="space-y-2">
                <EditableField
                  label="Direcci√≥n"
                  value={selectedRequest.address}
                  type="text"
                  required={true}
                  onSave={(value) => updateField("address", value)}
                />
                <div className="grid grid-cols-2 gap-4">
                  <EditableField
                    label="C√≥digo Postal"
                    value={selectedRequest.postal_code}
                    type="text"
                    required={true}
                    onSave={(value) => updateField("postal_code", value)}
                  />
                  <EditableField
                    label="Ciudad"
                    value={selectedRequest.city}
                    type="text"
                    required={true}
                    onSave={(value) => updateField("city", value)}
                  />
                </div>
                <EditableField
                  label="Provincia"
                  value={selectedRequest.province}
                  type="text"
                  required={true}
                  onSave={(value) => updateField("province", value)}
                />
                <div className="space-y-2">
                  <EditableField
                    label="Tipo de Vivienda"
                    value={selectedRequest.housing_type}
                    type="select"
                    options={getHousingTypeOptions()}
                    required={true}
                    onSave={(value) => updateField("housing_type", value)}
                  />
                  <EditableField
                    label="Detalles Tipo de Vivienda"
                    value={selectedRequest.housing_type_details}
                    type="text"
                    required={false}
                    placeholder="Detalles adicionales del tipo de vivienda"
                    onSave={(value) => updateField("housing_type_details", value)}
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Informaci√≥n Laboral y Financiera */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <Heading level="h3" className="text-lg">
                Informaci√≥n Laboral
              </Heading>
              <div className="space-y-2">
                <EditableField
                  label="Tipo de Contrato"
                  value={selectedRequest.contract_type}
                  type="select"
                  options={getContractTypeOptions()}
                  required={true}
                  onSave={(value) => updateField("contract_type", value)}
                />
                {(() => {
                  const payrollInfo = extractPayrollInfo(selectedRequest);
                  return (
                    <>
                      {payrollInfo.employerName &&
                        selectedRequest.contract_type === "employee" && (
                          <div>
                            <Text
                              size="small"
                              className="text-gray-600 dark:text-gray-400"
                            >
                              Empresa (N√≥mina)
                            </Text>
                            <Text className="font-medium">
                              {payrollInfo.employerName}
                            </Text>
                          </div>
                        )}
                      {payrollInfo.jobTitle &&
                        selectedRequest.contract_type === "employee" && (
                          <div>
                            <Text
                              size="small"
                              className="text-gray-600 dark:text-gray-400"
                            >
                              Puesto (N√≥mina)
                            </Text>
                            <Text className="font-medium">
                              {payrollInfo.jobTitle}
                            </Text>
                          </div>
                        )}
                      {payrollInfo.grossSalary && (
                        <div>
                          <Text
                            size="small"
                            className="text-gray-600 dark:text-gray-400"
                          >
                            Salario Bruto (N√≥mina)
                          </Text>
                          <Text className="font-semibold text-base text-blue-600">
                            {typeof payrollInfo.grossSalary === 'string' 
                              ? payrollInfo.grossSalary.replace(/„Äê[^„Äë]*„Äë/g, '') 
                              : payrollInfo.grossSalary}
                          </Text>
                        </div>
                      )}
                      {payrollInfo.netSalary && (
                        <div>
                          <Text
                            size="small"
                            className="text-gray-600 dark:text-gray-400"
                          >
                            Salario Neto (N√≥mina)
                          </Text>
                          <Text className="font-semibold text-base text-green-600">
                            {typeof payrollInfo.netSalary === 'string' 
                              ? payrollInfo.netSalary.replace(/„Äê[^„Äë]*„Äë/g, '') 
                              : payrollInfo.netSalary}
                          </Text>
                        </div>
                      )}
                    </>
                  );
                })()}
                
                
                <EditableField
                  label="Ingresos Mensuales (Declarados)"
                  value={selectedRequest.income}
                  type="text"
                  required={true}
                  placeholder="Ingrese el ingreso mensual en euros"
                  onSave={(value) => updateField("income", value)}
                />
                <EditableField
                  label="Cargo"
                  value={selectedRequest.company_position}
                  type="text"
                  required={false}
                  placeholder="Cargo o puesto de trabajo"
                  onSave={(value) => updateField("company_position", value)}
                />
                <EditableField
                  label="Fecha de inicio"
                  value={selectedRequest.company_start_date}
                  type="date"
                  required={false}
                  onSave={(value) => updateField("company_start_date", value)}
                />
                {selectedRequest.contract_type === "freelance" && (
                  <EditableField
                    label="Fecha de alta aut√≥nomo"
                    value={selectedRequest.freelance_start_date}
                    type="date"
                    required={false}
                    onSave={(value) => updateField("freelance_start_date", value)}
                  />
                )}
              </div>
            </div>

            <div className="space-y-4">
              <Heading level="h3" className="text-lg">
                Financiaci√≥n
              </Heading>
              <div className="space-y-2">
                <EditableField
                  label="Plazos Solicitados"
                  value={selectedRequest.financing_installment_count}
                  type="select"
                  options={getInstallmentOptions()}
                  required={true}
                  onSave={(value) => updateField("financing_installment_count", value)}
                />
                
                <div>
                  <Text
                    size="small"
                    className="text-gray-600 dark:text-gray-400"
                  >
                    Fecha de Solicitud
                  </Text>
                  <Text className="font-medium">
                    {formatDate(selectedRequest.requested_at)}
                  </Text>
                </div>
              </div>
            </div>
          </div>

          {/* Documentos */}
          <div className="space-y-4">
            <Heading level="h3" className="text-lg">
              Documentaci√≥n
            </Heading>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="space-y-2 flex flex-col">
                <Text size="small" className="text-gray-600 dark:text-gray-400">
                  DNI/NIE
                </Text>
                {selectedRequest.identity_front_file_id ? (
                  <a
                    href={selectedRequest.identity_front_file_id}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2  text-blue-600 dark:text-gray-300 hover:text-blue-800"
                  >
                    <Eye className="w-4 h-4" />
                    Ver Anverso
                  </a>
                ) : (
                  <Text size="small" className="text-gray-400">
                    No disponible
                  </Text>
                )}
                {selectedRequest.identity_back_file_id ? (
                  <a
                    href={selectedRequest.identity_back_file_id}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2  text-blue-600 dark:text-gray-300 hover:text-blue-800"
                  >
                    <Eye className="w-4 h-4" />
                    Ver Reverso
                  </a>
                ) : (
                  <Text size="small" className="text-gray-400">
                    No disponible
                  </Text>
                )}
              </div>

              {selectedRequest.paysheet_file_id &&
                (() => {
                  const payrollUrls = selectedRequest.paysheet_file_id
                    .split("|")
                    .filter((url) => url.trim());
                  return payrollUrls.map((url, index) => (
                    <div key={index} className="space-y-2">
                      <Text
                        size="small"
                        className="text-gray-600 dark:text-gray-400"
                      >
                        {payrollUrls.length > 1
                          ? `N√≥mina ${index + 1}`
                          : "N√≥mina"}
                      </Text>
                      <a
                        href={url.trim()}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-2 text-blue-600 dark:text-gray-300 hover:text-blue-800"
                      >
                        <Eye className="w-4 h-4" />
                        Ver n√≥mina {payrollUrls.length > 1 ? index + 1 : ""}
                      </a>
                    </div>
                  ));
                })()}

              {selectedRequest.freelance_rental_file_id && (
                <div className="space-y-2">
                  <Text
                    size="small"
                    className="text-gray-600 dark:text-gray-400"
                  >
                    Declaraci√≥n de la Renta
                  </Text>
                  <a
                    href={selectedRequest.freelance_rental_file_id}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 text-blue-600 dark:text-gray-300 hover:text-blue-800"
                  >
                    <Eye className="w-4 h-4" />
                    Ver declaraci√≥n
                  </a>
                </div>
              )}

              {selectedRequest.freelance_quote_file_id && (
                <div className="space-y-2">
                  <Text
                    size="small"
                    className="text-gray-600 dark:text-gray-400"
                  >
                    Cuota de Aut√≥nomos
                  </Text>
                  <a
                    href={selectedRequest.freelance_quote_file_id}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 text-blue-600 dark:text-gray-300 hover:text-blue-800"
                  >
                    <Eye className="w-4 h-4" />
                    Ver cuota
                  </a>
                </div>
              )}

              {selectedRequest.pensioner_proof_file_id && (
                <div className="space-y-2">
                  <Text
                    size="small"
                    className="text-gray-600 dark:text-gray-400"
                  >
                    Justificante de Pensi√≥n
                  </Text>
                  <a
                    href={selectedRequest.pensioner_proof_file_id}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2  text-blue-600 dark:text-gray-300 hover:text-blue-800"
                  >
                    <Eye className="w-4 h-4" />
                    Ver justificante
                  </a>
                </div>
              )}

              {selectedRequest.bank_account_proof_file_id && (
                <div className="space-y-2">
                  <Text
                    size="small"
                    className="text-gray-600 dark:text-gray-400"
                  >
                    Justificante Bancario
                  </Text>
                  <a
                    href={selectedRequest.bank_account_proof_file_id}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2  text-blue-600 dark:text-gray-300 hover:text-blue-800"
                  >
                    <Eye className="w-4 h-4" />
                    Ver justificante
                  </a>
                </div>
              )}
            </div>
          </div>

          {/* Comentarios */}
          <div className="space-y-4">
            <Heading level="h3" className="text-lg">
              Comentarios del Cliente
            </Heading>
            <EditableField
              label="Comentarios/Dudas del Cliente"
              value={selectedRequest.doubts}
              type="textarea"
              required={false}
              placeholder="Comentarios o dudas del cliente"
              onSave={(value) => updateField("doubts", value)}
            />
          </div>

          {/* Notas del Admin */}
          <div className="space-y-4">
            <Heading level="h3" className="text-lg">
              Notas
            </Heading>
            <div className="space-y-3">
              <textarea
                value={adminNotes}
                onChange={(e) => setAdminNotes(e.target.value)}
                placeholder="Agregar notas administrativas sobre esta solicitud..."
                className="w-full min-h-[120px] p-3 border border-gray-300 rounded-lg text-black resize-vertical focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-300 dark:border-gray-600"
                rows={4}
              />
              <div className="flex justify-end">
                <Button
                  onClick={saveAdminNotes}
                  disabled={isSavingNotes}
                  size="small"
                >
                  {isSavingNotes ? "Guardando..." : "Guardar Notas"}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </Container>
    );
  }

  return (
    <Container className="divide-y p-0">
      <div className="flex items-center justify-between px-6 py-4">
        <Heading level="h2">Solicitudes de Financiaci√≥n</Heading>
        <div className="flex items-center gap-2">
          <Badge size="small">
            {filteredFinancing.length}{" "}
            {filteredFinancing.length === financing.length
              ? "solicitudes"
              : `de ${financing.length} solicitudes`}
          </Badge>
          <Button variant="secondary" size="small">
            <Download className="w-4 h-4" />
            Exportar
          </Button>
        </div>
      </div>

      {/* Filtros */}
      <div className="px-6 py-4 ">
        <div className="flex items-center gap-4 flex-wrap">
          <Filter className="w-4 h-4 text-gray-500" />
          <select
            value={filterByContractType}
            onChange={(e) => setFilterByContractType(e.target.value)}
            className="px-3 py-1 border border-gray-300 rounded-md text-sm"
          >
            <option value="">Todos los tipos de contrato</option>
            <option value="employee_permanent">Empleados Fijos</option>
            <option value="employee_temporary">Empleados Temporales</option>
            <option value="freelance">Aut√≥nomos</option>
            <option value="pensioner">Pensionistas</option>
            <option value="unemployed">Desempleados</option>
          </select>
          <select
            value={filterByStatus}
            onChange={(e) => setFilterByStatus(e.target.value)}
            className="px-3 py-1 border border-gray-300 rounded-md text-sm"
          >
            <option value="">Todos los estados</option>
            <option value="pending">
              {getStatusIcon("pending")} Pendientes
            </option>
            <option value="budgeted">
              {getStatusIcon("budgeted")} Presupuestados
            </option>
            <option value="missing_docs">
              {getStatusIcon("missing_docs")} Falta documentaci√≥n
            </option>
            <option value="denied">{getStatusIcon("denied")} Denegados</option>
            <option value="cancelled">
              {getStatusIcon("cancelled")} Canceladas
            </option>
            <option value="pre_accepted">
              {getStatusIcon("pre_accepted")} Preaceptadas
            </option>
            <option value="under_review">
              {getStatusIcon("under_review")} En revisi√≥n
            </option>
            <option value="in_force">
              {getStatusIcon("in_force")} En vigor
            </option>
            <option value="in_software">
              {getStatusIcon("in_software")} En software
            </option>
            <option value="delivered">
              {getStatusIcon("delivered")} Entregados
            </option>
          </select>
          <select
            value={filterByContacted}
            onChange={(e) => setFilterByContacted(e.target.value)}
            className="px-3 py-1 border border-gray-300 rounded-md text-sm"
          >
            <option value="">Todos (contactado)</option>
            <option value="contacted">‚úÖ Contactados</option>
            <option value="not_contacted">‚ùå No contactados</option>
          </select>
          
          <label className="flex items-center gap-2 text-sm cursor-pointer">
            <input
              type="checkbox"
              checked={showCancelledDelivered}
              onChange={(e) => setShowCancelledDelivered(e.target.checked)}
              className="w-4 h-4 text-blue-500 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
            />
            <span className="text-gray-700 dark:text-gray-300">
              Mostrar canceladas/entregadas/denegadas
            </span>
          </label>
          <div className="relative">
            <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            <input
              type="text"
              placeholder="Buscar por tel√©fono, email o DNI"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-8 pr-3 py-1 border border-gray-300 rounded-md text-sm min-w-[270px]"
            />
          </div>
          {(filterByContractType || searchTerm || filterByStatus || filterByContacted || showCancelledDelivered) && (
            <button
              onClick={() => {
                setFilterByContractType("");
                setSearchTerm("");
                setFilterByStatus("");
                setFilterByContacted("");
                setShowCancelledDelivered(false);
                setCurrentPage(1);
              }}
              className="px-2 py-1 text-xs text-gray-600 dark:text-gray-300 hover:text-gray-700 underline"
            >
              Limpiar filtros
            </button>
          )}
        </div>
      </div>

      <div className="px-6 py-8 overflow-scroll">
        {paginatedFinancing.length === 0 && filteredFinancing.length === 0 ? (
          <Text className="text-gray-500">
            {filterByContractType || searchTerm || filterByStatus || filterByContacted || !showCancelledDelivered
              ? `No se encontraron solicitudes que coincidan con los filtros aplicados${!showCancelledDelivered ? ' (canceladas/entregadas/denegadas ocultas)' : ''}`
              : `No hay solicitudes de financiaci√≥n todav√≠a`}
          </Text>
        ) : (
          <Table>
            <Table.Header>
              <Table.Row>
                <Table.HeaderCell>#ID</Table.HeaderCell>
                <Table.HeaderCell>Estado</Table.HeaderCell>
                <Table.HeaderCell>Contactado</Table.HeaderCell>
                <Table.HeaderCell>DNI</Table.HeaderCell>
                <Table.HeaderCell>Cliente</Table.HeaderCell>
                <Table.HeaderCell>Contacto</Table.HeaderCell>
                <Table.HeaderCell>Trabajo</Table.HeaderCell>
                <Table.HeaderCell>Ingresos</Table.HeaderCell>
                <Table.HeaderCell>Financiaci√≥n</Table.HeaderCell>
                <Table.HeaderCell>Documentos</Table.HeaderCell>
                <Table.HeaderCell>Acciones</Table.HeaderCell>
                <Table.HeaderCell>Fecha</Table.HeaderCell>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {paginatedFinancing.map((item, index) => {
                // Debug logging para items sin ID
                if (!item.id || item.id.trim() === "") {
                  console.warn(`‚ö†Ô∏è Item sin ID en posici√≥n ${index}:`, item);
                }

                const dniInfo = extractDniInfo(item);
                
                return (
                  <Table.Row key={item.id || `no-id-${index}`}>
                    <Table.Cell>
                      <Text size="small" className="font-mono text-gray-400">
                        #{getSequentialId(item)}
                      </Text>
                    </Table.Cell>
                    <Table.Cell>
                      <select
                        value={item.status || "pending"}
                        onChange={(e) => updateStatus(item.id, e.target.value)}
                        className={`px-2 py-1 text-xs rounded border ${getStatusColor(
                          item.status || "pending"
                        )} cursor-pointer`}
                        disabled={!item.id || item.id.trim() === ""}
                      >
                        <option value="pending">
                          {getStatusIcon("pending")} Sin gestionar
                        </option>
                        <option value="budgeted">
                          {getStatusIcon("budgeted")} Presupuestado
                        </option>
                        <option value="missing_docs">
                          {getStatusIcon("missing_docs")} Falta documentaci√≥n
                        </option>
                        <option value="denied">
                          {getStatusIcon("denied")} Denegado
                        </option>
                        <option value="cancelled">
                          {getStatusIcon("cancelled")} Cancelada
                        </option>
                        <option value="pre_accepted">
                          {getStatusIcon("pre_accepted")} Preaceptada
                        </option>
                        <option value="under_review">
                          {getStatusIcon("under_review")} En revisi√≥n
                        </option>
                        <option value="in_force">
                          {getStatusIcon("in_force")} En vigor
                        </option>
                        <option value="in_software">
                          {getStatusIcon("in_software")} En software
                        </option>
                        <option value="delivered">
                          {getStatusIcon("delivered")} Entregado
                        </option>
                      </select>
                    </Table.Cell>
                    <Table.Cell>
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          checked={item.contacted || false}
                          onChange={(e) =>
                            updateContactedStatus(item.id, e.target.checked)
                          }
                          disabled={!item.id || item.id.trim() === ""}
                          className="w-4 h-4 text-green-500 bg-gray-100 border-gray-300 rounded focus:ring-green-500"
                        />
                        <span className="text-xs text-gray-600 dark:text-gray-300">
                          {item.contacted ? "Contactado" : "No contactado"}
                        </span>
                      </div>
                    </Table.Cell>
                    <Table.Cell>
                      <div className="space-y-1">
                        <Text size="small" className="font-mono">
                          {dniInfo.documentNumber || "No extra√≠do"}
                        </Text>
                        {dniInfo.fullName && (
                          <Text size="small" className="text-gray-500 truncate max-w-32" title={dniInfo.fullName}>
                            {dniInfo.fullName}
                          </Text>
                        )}
                      </div>
                    </Table.Cell>
                    <Table.Cell>
                      <div className="space-y-1">
                        <Text className="font-medium">{item.email}</Text>
                        <Text size="small" className="text-gray-400">
                          {item.city}, {item.province}
                        </Text>
                      </div>
                    </Table.Cell>
                    <Table.Cell>
                      <div className="space-y-1">
                        <Text size="small">üìß {item.email}</Text>
                        <Text size="small">üìû {item.phone_mumber}</Text>
                      </div>
                    </Table.Cell>
                    <Table.Cell>
                      <div className="space-y-1 p-2">
                        <Badge
                          className={getContractTypeBadgeColor(
                            item.contract_type
                          )}
                          size="small"
                        >
                          {getContractTypeLabel(item.contract_type)}
                        </Badge>
                        {item.company_position && (
                          <Text size="small" className="text-gray-400">
                            {item.company_position}
                          </Text>
                        )}
                      </div>
                    </Table.Cell>
                    <Table.Cell>
                      <Text className="font-semibold text-green-600">
                        {formatIncome(item.income)}
                      </Text>
                    </Table.Cell>
                    <Table.Cell>
                      <Badge size="small">
                        {item.financing_installment_count} meses
                      </Badge>
                    </Table.Cell>
                    <Table.Cell>
                      <Badge size="small">{hasDocuments(item)} docs</Badge>
                    </Table.Cell>
                    <Table.Cell>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="secondary"
                          size="small"
                          onClick={() => {
                            setSearchParams({ id: item.id });
                            setSelectedRequest(item);
                          }}
                          title="Ver solicitud (URL compartible)"
                        >
                          <Eye className="w-4 h-4" />
                          Ver
                        </Button>
                        <Button
                          variant="secondary"
                          size="small"
                          onClick={() => downloadAllDocuments(item)}
                          disabled={hasDocuments(item) === 0}
                          title={
                            hasDocuments(item) === 0
                              ? "No hay documentos disponibles"
                              : "Descargar todos los documentos"
                          }
                        >
                          <Download className="w-4 h-4" />
                          Docs
                        </Button>
                      </div>
                    </Table.Cell>
                    <Table.Cell>
                      <Text size="small" className="text-gray-400">
                        {formatDate(item.requested_at)}
                      </Text>
                    </Table.Cell>
                  </Table.Row>
                );
              })}
            </Table.Body>
          </Table>
        )}

        {/* Controles de paginaci√≥n */}
        {filteredFinancing.length > 0 && totalPages > 1 && (
          <div className="flex items-center justify-between mt-6 pt-4 border-t border-gray-200">
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Text size="small">
                Mostrando {startIndex + 1} -{" "}
                {Math.min(endIndex, filteredFinancing.length)} de{" "}
                {filteredFinancing.length} solicitudes
              </Text>
            </div>

            <div className="flex items-center gap-2">
              <Button
                variant="secondary"
                size="small"
                onClick={() => setCurrentPage(currentPage - 1)}
                disabled={currentPage === 1}
              >
                <ChevronLeft className="w-4 h-4" />
                Anterior
              </Button>

              <div className="flex items-center gap-1">
                {Array.from({ length: Math.min(totalPages, 5) }, (_, index) => {
                  let pageNumber;
                  if (totalPages <= 5) {
                    pageNumber = index + 1;
                  } else if (currentPage <= 3) {
                    pageNumber = index + 1;
                  } else if (currentPage >= totalPages - 2) {
                    pageNumber = totalPages - 4 + index;
                  } else {
                    pageNumber = currentPage - 2 + index;
                  }

                  return (
                    <button
                      key={pageNumber}
                      onClick={() => setCurrentPage(pageNumber)}
                      className={`px-3 py-1 text-sm rounded ${
                        currentPage === pageNumber
                          ? "bg-blue-500 text-white"
                          : "text-gray-600 hover:bg-gray-100"
                      }`}
                    >
                      {pageNumber}
                    </button>
                  );
                })}
              </div>

              <Button
                variant="secondary"
                size="small"
                onClick={() => setCurrentPage(currentPage + 1)}
                disabled={currentPage === totalPages}
              >
                Siguiente
                <ChevronRight className="w-4 h-4" />
              </Button>
            </div>
          </div>
        )}
      </div>
    </Container>
  );
};

export const config = defineRouteConfig({
  label: "Financiaci√≥n",
});

export default FinancingPage;
