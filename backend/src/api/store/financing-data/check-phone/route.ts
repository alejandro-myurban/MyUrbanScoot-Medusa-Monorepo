import type { MedusaRequest, MedusaResponse } from "@medusajs/framework/http";
import { FINANCING_MODULE } from "modules/financing_data";
import FinancingModuleService from "modules/financing_data/service";

// Funci√≥n para normalizar el n√∫mero de tel√©fono (misma que en route.ts)
const normalizePhoneNumber = (phone: string): string => {
  if (!phone) return phone;
  
  // Limpiar espacios y caracteres especiales excepto +
  const cleanPhone = phone.trim().replace(/[^\d+]/g, '');
  
  console.log(`üìû Normalizando tel√©fono para b√∫squeda: "${phone}" -> "${cleanPhone}"`);
  
  // Si ya tiene un prefijo internacional (empieza con +), dejarlo como est√°
  if (cleanPhone.startsWith('+')) {
    console.log(`‚úÖ Tel√©fono ya tiene prefijo internacional: ${cleanPhone}`);
    return cleanPhone;
  }
  
  // Si empieza con 34 sin +, a√±adir el +
  if (cleanPhone.startsWith('34') && cleanPhone.length >= 11) {
    const normalized = `+${cleanPhone}`;
    console.log(`üîÑ A√±adiendo + a prefijo 34: ${normalized}`);
    return normalized;
  }
  
  // Si no tiene prefijo y tiene 9 d√≠gitos (t√≠pico espa√±ol), a√±adir +34
  if (cleanPhone.length === 9 && /^[67]/.test(cleanPhone)) {
    const normalized = `+34${cleanPhone}`;
    console.log(`üá™üá∏ A√±adiendo prefijo espa√±ol +34: ${normalized}`);
    return normalized;
  }
  
  // Si no cumple ninguna condici√≥n anterior, devolver tal como est√°
  console.log(`‚ö†Ô∏è Tel√©fono no normalizado (formato no reconocido): ${cleanPhone}`);
  return cleanPhone;
};

export const POST = async (
  req: MedusaRequest,
  res: MedusaResponse
) => {
  try {
    console.log("üî• Backend API /store/financing-data/check-phone called");
    console.log("üìã Request body:", JSON.stringify(req.body, null, 2));
    
    const { phone_number } = req.body;

    console.log(`üîç Checking phone number existence: "${phone_number}"`);
    console.log(`üìè Phone number length: ${phone_number?.length}`);
    console.log(`üìû Phone number type: ${typeof phone_number}`);

    // Validar que el n√∫mero de tel√©fono est√© presente
    if (!phone_number || phone_number.trim() === "") {
      console.log("‚ùå N√∫mero de tel√©fono vac√≠o o no proporcionado");
      return res.status(400).json({
        message: "N√∫mero de tel√©fono requerido",
        exists: false
      });
    }

    // Normalizar el n√∫mero de tel√©fono para b√∫squeda consistente
    const normalizedPhoneNumber = normalizePhoneNumber(phone_number);
    console.log(`üìû Tel√©fono normalizado para b√∫squeda: "${phone_number}" -> "${normalizedPhoneNumber}"`)

    console.log("üì° Resolviendo financing module service...");
    const financingDataModule: FinancingModuleService =
      req.scope.resolve(FINANCING_MODULE);
    console.log("‚úÖ Financing module service resuelto");

    console.log(`üîé Buscando solicitudes con phone_mumber: "${normalizedPhoneNumber}"`);
    
    // Buscar si existe alguna solicitud con este n√∫mero de tel√©fono normalizado
    const existingRequestsNormalized = await financingDataModule.listFinancingData({
      phone_mumber: normalizedPhoneNumber
    });

    console.log(`üìä Solicitudes encontradas con n√∫mero normalizado:`, existingRequestsNormalized?.length || 0);
    
    // Tambi√©n buscar sin el prefijo +34 para datos antiguos
    let existingRequestsWithoutPrefix = [];
    if (normalizedPhoneNumber.startsWith('+34')) {
      const phoneWithoutPrefix = normalizedPhoneNumber.replace('+34', '');
      console.log(`üîé Buscando tambi√©n solicitudes sin prefijo: "${phoneWithoutPrefix}"`);
      
      existingRequestsWithoutPrefix = await financingDataModule.listFinancingData({
        phone_mumber: phoneWithoutPrefix
      });
      
      console.log(`üìä Solicitudes encontradas sin prefijo:`, existingRequestsWithoutPrefix?.length || 0);
    }
    
    // Combinar ambos resultados
    const allExistingRequests = [
      ...(existingRequestsNormalized || []),
      ...(existingRequestsWithoutPrefix || [])
    ];
    
    console.log(`üìä Total solicitudes encontradas:`, allExistingRequests?.length || 0);
    if (allExistingRequests && allExistingRequests.length > 0) {
      console.log(`üìã Detalles de solicitudes encontradas:`, allExistingRequests.map(req => ({ 
        id: req.id, 
        phone_mumber: req.phone_mumber,
        email: req.email,
        created_at: req.created_at 
      })));
    }

    const exists = allExistingRequests && allExistingRequests.length > 0;

    console.log(`üéØ RESULTADO FINAL - Phone number ${normalizedPhoneNumber} exists: ${exists}`);

    res.status(200).json({
      exists,
      message: exists 
        ? "Ya existe una solicitud con este n√∫mero de tel√©fono" 
        : "N√∫mero de tel√©fono disponible",
      count: allExistingRequests?.length || 0,
      normalized_phone: normalizedPhoneNumber // Devolver el tel√©fono normalizado
    });

  } catch (error) {
    console.error("‚ùå Error checking phone number:", error);
    console.error("üìä Error stack:", error.stack);

    const errorMessage =
      error instanceof Error ? error.message : "Error desconocido";

    res.status(500).json({
      message: "Error al verificar el n√∫mero de tel√©fono",
      error: errorMessage,
      exists: false
    });
  }
};