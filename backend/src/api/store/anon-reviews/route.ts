// src/api/store/anon-reviews/route.ts
import { MedusaRequest, MedusaResponse } from "@medusajs/framework/http";
import { z } from "zod";

// Schema actualizado para incluir im√°genes
const anonymousReviewSchema = z.object({
  product_id: z.string(),
  rating: z.number().min(1).max(5),
  content: z.string().min(1),
  name: z.string().optional(),
  images: z.array(z.string().url()).optional(), // Array de URLs de im√°genes
});

// Funci√≥n para generar IDs al estilo Medusa
function generateMedusaId(): string {
  // Genera un ID similar al formato de Medusa: 26 caracteres alfanum√©ricos en may√∫sculas
  const chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let result = "";
  for (let i = 0; i < 26; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

export const POST = async (req: MedusaRequest, res: MedusaResponse) => {
  try {
    console.log("üî• Endpoint anonymous-reviews llamado");
    console.log("üì¶ Request body:", req.body);

    // Validar el body manualmente
    const validatedData = anonymousReviewSchema.parse(req.body);
    console.log("‚úÖ Datos validados:", validatedData);
    console.log("üñºÔ∏è Im√°genes recibidas:", validatedData.images);

    // Generar ID √∫nico para la rese√±a siguiendo el patr√≥n del plugin
    const reviewId = `prev_${generateMedusaId()}`;
    console.log("üÜî ID generado:", reviewId);

    // Resolver servicios
    const workflows = req.scope.resolve("workflows");
    const query = req.scope.resolve("query");
    console.log("‚úÖ Servicios resueltos");

    try {
      console.log("üîÑ Intentando con im√°genes incluidas en el workflow...");

      // INTENTAR INCLUIR IM√ÅGENES con el formato correcto del plugin
      const productReviewData = {
        id: reviewId,
        name: validatedData.name || "Cliente an√≥nimo",
        email: null,
        product_id: validatedData.product_id,
        rating: validatedData.rating,
        content: validatedData.content,
        order_id: null,
        order_line_item_id: null,
        status: "approved",
        // Formato de im√°genes que podr√≠a esperar el plugin
        images:
          validatedData.images?.map((imageUrl, index) => ({
            id: `pri_${generateMedusaId()}`,
            url: imageUrl,
            alt_text: `Review image ${index + 1}`,
            order: index,
          })) || [],
      };

      console.log("üìä Datos completos incluyendo im√°genes:", productReviewData);

      const result = await workflows.run("create-product-reviews-workflow", {
        input: {
          productReviews: [productReviewData],
        },
      });

      const createdReview = result.result?.[0];
      console.log("‚úÖ Workflow ejecutado - revisando resultado...");
      console.log("üìã Rese√±a creada:", createdReview?.id);
      console.log(
        "üñºÔ∏è Im√°genes en resultado del workflow:",
        createdReview?.images?.length || 0
      );
      console.log(
        "üìã Detalle de im√°genes del workflow:",
        JSON.stringify(createdReview?.images, null, 2)
      );

      // IMPORTANTE: Si el workflow ya cre√≥ las im√°genes, NO ejecutar c√≥digo manual
      if (createdReview?.images && createdReview.images.length > 0) {
        console.log("‚úÖ El workflow ya proces√≥ las im√°genes correctamente");

        // Obtener la rese√±a completa final
        try {
          const reviewWithImages = await query.graph({
            entity: "product_review",
            fields: [
              "id",
              "name",
              "email",
              "rating",
              "content",
              "product_id",
              "status",
              "created_at",
              "updated_at",
              "images.*",
            ],
            filters: { id: createdReview.id },
          });

          const finalReview = reviewWithImages.data?.[0];
          console.log("‚úÖ Rese√±a final desde BD:", {
            id: finalReview?.id,
            images_count: finalReview?.images?.length || 0,
          });
          console.log(
            "üìã Im√°genes finales desde BD:",
            JSON.stringify(finalReview?.images, null, 2)
          );

          // SOLUCI√ìN TEMPORAL: Eliminar im√°genes duplicadas
          if (finalReview?.images && finalReview.images.length > 0) {
            console.log("üîß Aplicando filtro de duplicados...");

            // Agrupar por URL para detectar duplicados
            const imagesByUrl = finalReview.images.reduce((acc, img) => {
              if (!acc[img.url]) {
                acc[img.url] = [];
              }
              acc[img.url].push(img);
              return acc;
            }, {});

            // Para cada URL, quedarse solo con la primera imagen
            const uniqueImages = Object.values(imagesByUrl).map(
              (imagesGroup) => imagesGroup[0]
            );

            console.log(
              `üîß Duplicados filtrados: ${finalReview.images.length} ‚Üí ${uniqueImages.length}`
            );

            // Actualizar la rese√±a con im√°genes √∫nicas
            finalReview.images = uniqueImages;
          }

          return res.status(201).json({
            success: true,
            product_review: finalReview || createdReview,
            images_sent: validatedData.images?.length || 0,
            images_created: finalReview?.images?.length || 0,
            workflow_result: createdReview,
            debug_info: {
              workflow_images: createdReview?.images?.length || 0,
              final_images: finalReview?.images?.length || 0,
              images_match:
                (createdReview?.images?.length || 0) ===
                (finalReview?.images?.length || 0),
            },
          });
        } catch (fetchError) {
          console.log("‚ùå Error obteniendo rese√±a final:", fetchError.message);

          return res.status(201).json({
            success: true,
            product_review: createdReview,
            images_sent: validatedData.images?.length || 0,
            images_created: createdReview?.images?.length || 0,
            note: "Workflow proces√≥ im√°genes pero error al verificar BD",
          });
        }
      }

      // Si las im√°genes no se crearon en el workflow, intentar m√©todo alternativo
      else if (validatedData.images?.length > 0) {
        console.log(
          "‚ö†Ô∏è Workflow NO proces√≥ im√°genes - saltando m√©todo manual para evitar duplicados"
        );
        console.log("üîÑ Solo obteniendo rese√±a desde BD...");

        try {
          const reviewWithImages = await query.graph({
            entity: "product_review",
            fields: [
              "id",
              "name",
              "email",
              "rating",
              "content",
              "product_id",
              "status",
              "created_at",
              "updated_at",
              "images.*",
            ],
            filters: { id: createdReview.id },
          });

          const finalReview = reviewWithImages.data?.[0];
          console.log("‚úÖ Rese√±a desde BD (sin m√©todo manual):", {
            id: finalReview?.id,
            images_count: finalReview?.images?.length || 0,
          });

          return res.status(201).json({
            success: true,
            product_review: finalReview || createdReview,
            images_sent: validatedData.images?.length || 0,
            images_created: finalReview?.images?.length || 0,
            workflow_result: createdReview,
            note: "Workflow no proces√≥ im√°genes, m√©todo manual deshabilitado para evitar duplicados",
          });
        } catch (fetchError) {
          console.log("‚ùå Error obteniendo rese√±a final:", fetchError.message);

          return res.status(201).json({
            success: true,
            product_review: createdReview,
            images_sent: validatedData.images?.length || 0,
            images_created: "unknown",
            note: "Sin m√©todo manual - verificar por qu√© el workflow no proces√≥ im√°genes",
          });
        }
      }

      // ‚úÖ NUEVO: Caso cuando NO hay im√°genes para procesar
      else {
        console.log("üìù Rese√±a creada sin im√°genes");
        
        try {
          // Obtener la rese√±a desde BD para asegurar datos completos
          const reviewWithoutImages = await query.graph({
            entity: "product_review",
            fields: [
              "id",
              "name", 
              "email",
              "rating",
              "content",
              "product_id",
              "status",
              "created_at",
              "updated_at",
              "images.*",
            ],
            filters: { id: createdReview.id },
          });

          const finalReview = reviewWithoutImages.data?.[0];
          console.log("‚úÖ Rese√±a sin im√°genes desde BD:", {
            id: finalReview?.id,
            images_count: finalReview?.images?.length || 0,
          });

          return res.status(201).json({
            success: true,
            product_review: finalReview || createdReview,
            images_sent: 0,
            images_created: finalReview?.images?.length || 0,
            workflow_result: createdReview,
            note: "Rese√±a creada exitosamente sin im√°genes"
          });
          
        } catch (fetchError) {
          console.log("‚ùå Error obteniendo rese√±a final sin im√°genes:", fetchError.message);
          
          // Fallback: retornar directamente el resultado del workflow
          return res.status(201).json({
            success: true,
            product_review: createdReview,
            images_sent: 0,
            images_created: createdReview?.images?.length || 0,
            note: "Rese√±a creada sin im√°genes (usando resultado directo del workflow)"
          });
        }
      }

    } catch (workflowError) {
      console.log("‚ùå Error ejecutando workflow:", workflowError.message);  
      console.log("‚ùå Stack del workflow:", workflowError.stack);
      throw workflowError;
    }
  } catch (error) {
    console.error("‚ùå Error completo:", error);

    if (error instanceof z.ZodError) {
      return res.status(400).json({
        error: "Datos de entrada inv√°lidos",
        details: error.errors,
      });
    }

    res.status(500).json({
      error: "Error interno del servidor",
      details: error.message,
    });
  }
};